Abstract

W3C based Contacts interface.

Table of Contents

1. Introduction
2. Interfaces
2.1. ContactError
2.2. ServiceContacts
2.3. Contacts
2.4. Contact
2.5. ContactName
2.6. ContactField
2.7. ContactAddress
2.8. ContactOrganization
2.9. ContactFindOptions
2.10. ContactFindCB
2.11. ContactErrorCB
3. Features
4. Full WebIDL
Summary of Methods

Interface	Method
ContactError	
ServiceContacts	
Contacts	void find(DOMString [] fields, ContactFindCB successCB, ContactErrorCB errorCB, ContactFindOptions options)
Contact	
ContactName	
ContactField	
ContactAddress	
ContactOrganization	
ContactFindOptions	
ContactFindCB	void onsuccess(Contact [] contactObjs)
ContactErrorCB	void onerror(ContactError error)
1. Introduction

This specification provides a wrapper that mandates the use of the W3C Contacts API (Editor's draft 16th June).

The Contacts API defines the high-level interfaces required to obtain read access to a user's unified address book.

This API includes the following key interfaces:

A Contacts interface, which provides the method needed to access a user's unified address book. A Contact interface, which captures the individual contact information that can be returned following a successful read operation.

Note that while the W3C version, on which this specification is based on, provides only the ServiceContacts to retrieve contacts, in webinos contacts can also be retrieved using the findServices method of the Service Discovery API.

2. Interfaces

2.1. ContactError

Contacts specific errors.

         [NoInterfaceObject]
        interface ContactError {

            const unsigned short UNKNOWN_ERROR = 0;

            const unsigned short INVALID_ARGUMENT_ERROR = 1;

            const unsigned short TIMEOUT_ERROR = 2;

            const unsigned short PENDING_OPERATION_ERROR = 3;

            const unsigned short IO_ERROR = 4;

            const unsigned short NOT_SUPPORTED_ERROR = 5;

            const unsigned short PERMISSION_DENIED_ERROR = 20;

            readonly attribute unsigned short code;
        };
Constants

unsigned short UNKNOWN_ERROR
An unknown error occurred.

unsigned short INVALID_ARGUMENT_ERROR
An invalid parameter was provided when the requested method was invoked.

unsigned short TIMEOUT_ERROR
The requested method timed out before it could be completed.

unsigned short PENDING_OPERATION_ERROR
There is already a task in the device task source.

unsigned short IO_ERROR
An error occurred in communication with the underlying implementation that meant the requested method could not complete.

unsigned short NOT_SUPPORTED_ERROR
The requested method is not supported by the current implementation.

unsigned short PERMISSION_DENIED_ERROR
Access to the requested information was denied by the implementation or by the user.

Attributes

readonly unsigned short code
An error code assigned by an implementation when an error has occurred in Contacts API processing. No exceptions.

This attribute is readonly.
2.2. ServiceContacts

The ServiceContacts interface is exposed on the Navigator object [NAVIGATOR]. Its goal is to provide an access point to the functionality in this specification.

        [NoInterfaceObject]
        interface ServiceContacts {

                    readonly attribute Contacts contacts;
        };
Attributes

readonly Contacts contacts
The object through which the contacts functionality can be accessed. No exceptions.

This attribute is readonly.
2.3. Contacts

The Contacts interface exposes a database of contact information that may be retrieved.

        [NoInterfaceObject]
        interface Contacts {


            caller void find (DOMString[] fields, ContactFindCB successCB, optional ContactErrorCB errorCB, optional ContactFindOptions options);
        };
Multiple contact groups can be represented within this unified address book by specifying consistent categories values as part of individual Contact objects.

Multiple contact groups can be displayed by filtering on the required categories values via the Contacts find() operation.

The ServiceContacts interface is exposed on the Navigator object [NAVIGATOR].

Its goal is to provide an access point to the functionality in this specification.

Methods

find
Find contacts in the address book according to the find contacts process detailed below.

Signature

caller void find(
              DOMString
            [] fields, ContactFindCB successCB, optional ContactErrorCB errorCB, optional ContactFindOptions options);
This method takes two, three or four arguments. When called, it starts the following find contacts process:

Let successCallback be the callback indicated by the method's second argument.

Let errorCallback be the callback indicated by the method's third argument, if any, or null otherwise.

If successCallback is null, then throw a TypeError (as defined in [WEBIDL]).

If there is a task from the device task source in one of the task queues (e.g. an existing find() operation is still pending a response), run these substeps:

If errorCallback is not null, let error be a ContactError object whose code attribute has the value PENDING_OPERATION_ERROR and queue a task to invoke errorCallback with error as its argument.

Abort this operation.

Return, and run the remaining steps asynchronously.

Let results be the array of Contact objects obtained by searching contacts in the address book according to the rules defined in Contact Search Processing, or null if the search has failed.

If results is null, run these substeps:

If errorCallback is not null, let error be a ContactError object whose code attribute has its value set according to the type of failure that occurred and queue a task to invoke errorCallback with error as its argument.

Abort this operation.

Queue a task to invoke successCallback with results as its argument.

Parameters

fields
Optional: No.
Nullable: No
Type: array
Description: The search qualifier.
successCB
Optional: No.
Nullable: No
Type: ContactFindCB
Description: Function to call when the asynchronous operation completes successfully.
errorCB
Optional: Yes.
Nullable: No
Type: ContactErrorCB
Description: Function to call when the asynchronous operation fails.
options
Optional: Yes.
Nullable: No
Type: ContactFindOptions
Description: The options to apply to the output of this method.
Return value

caller void
2.4. Contact

The Contact interface captures the properties of a contact object.

        [NoInterfaceObject]
        interface Contact {
                        

             readonly attribute DOMString              id;

             attribute DOMString?             displayName;

             attribute  ContactName           name;

             attribute DOMString?             nickname;

             attribute ContactField[]?        phoneNumbers;

             attribute ContactField[]?        emails;

             attribute ContactAddress[]?      addresses;

             attribute ContactField[]?        ims;

             attribute ContactOrganization[]? organizations;

             attribute Date?                  revision;

             attribute Date?                  birthday;

             attribute DOMString?             gender;

             attribute DOMString?             note;

             attribute ContactField[]?        photos;

             attribute DOMString[]?           categories;

             attribute ContactField[]?        urls;

             attribute DOMString?             timezone;
        };
All Contact objects must include all attributes supported by the implementation, regardless of whether these attributes have been assigned a null value or not. If a supported attribute has not been assigned a value by the user or the implementation, then this attribute must still be present in the resulting Contact object and must have a value of null.

Additional attributes may be included according to the provisions detailed in Extended Contact Properties and Parameters. If an extended attribute is supported by the current implementation and has not been assigned a value by the user or the implementation, then this extended attribute must still be present in the resulting Contact object and must have a value of null.

Attributes

readonly DOMString id
A globally unique identifier for the given Contact object.

Each Contact instance must include a non-empty id value.

No exceptions.

This attribute is readonly.
DOMString? displayName
This attribute contains the name of this Contact in a form that is suitable for display to the user.

Each Contact must include either a displayName or the name attribute.

No exceptions.

ContactName name
This attribute represents the full name of this Contact indicated by the name components associated with the ContactName object.

Each Contact must include either a displayName or the name attribute.

No exceptions.

DOMString? nickname
This attribute contains the nickname (or a casual name) for this Contact.

No exceptions.

ContactField [] phoneNumbers
This attribute captures one or more phone numbers associated with this Contact.

No exceptions.

ContactField [] emails
This attribute represents one or more email addresses associated with this Contact.

No exceptions.

ContactAddress [] addresses
This attribute represents one or more physical addresses associated with this Contact.

No exceptions.

ContactField [] ims
This attribute represents one or more instant messaging identifiers associated with this Contact.

No exceptions.

ContactOrganization [] organizations
This attribute represents one or more organizations associated with this Contact.

No exceptions.

Date? revision
This attribute contains the timestamp information associated with this Contact, which represents the last known modification time. If no modification time exists, then this object contains the timestamp of the object's creation time.

No exceptions.

Date? birthday
This attribute contains birthday of this Contact.

The year value may be set to 0000 when the age of the Contact is private or the year is not available.

No exceptions.

DOMString? gender
This attribute contains the gender of this Contact. This attribute should have one of the following values:

male

female

undisclosed

Note however that this attribute may contain a value not listed above.

No exceptions.

DOMString? note
This attribute contains the personal notes (free-text) for this Contact that is managed by the user of the address book.

No exceptions.

ContactField [] photos
This attribute represents one or more photos associated with this Contact.

The photos must be specified in the value attribute of the ContactField object either by using a URL to an image resource or base64 encoded string of the image data.

No exceptions.

DOMString [] categories
This attribute contains one or more user-defined categories/tags/labels associated with this Contact. e.g. "family", "favourite", "cryptozoologists".

No exceptions.

ContactField [] urls
This attribute represents one or more URLs associated with this Contact e.g. personal web page, blog.

The web resources must be specified using the value attribute of the ContactField object, and its type field may be set to "blog" or "profile".

No exceptions.

DOMString? timezone
This attribute represents the time zone of this Contact.

It is recommended that names from the public-domain Olson database [TZDB] will be used as the value of this attribute, but this is not a restriction. For example, a value of America/New_York indicates the Contact is associated with the variable time zone of the New York region of the United States, including daylight saving time offsets experienced in that region.

It is also possible to use this attribute to express the timezone as a positive or negative difference from UTC, in the 24-hour clock, in units of hours and minutes (i.e. +hh:mm). For example, a value of +05:30 indicates the Contact is associated with a fixed time zone of GMT+05:30.

No exceptions.

2.5. ContactName

The ContactName interface describes a contact's name.

      [NoInterfaceObject]
        interface ContactName {

            attribute DOMString? formatted;

            attribute DOMString? familyName;

            attribute DOMString? givenName;

            attribute DOMString? middleName;

            attribute DOMString? honorificPrefix;

            attribute DOMString? honorificSuffix;
        };
Attributes

DOMString? formatted
This attribute contains the full name, including all the individual components such as givenName, middleName, familyName, prefix, suffix as appropriate for the user's culture, and formatted for display (e.g. Mr. Joe Smith Jr).

No exceptions.

DOMString? familyName
This attribute contains the family name (also referred to as the last name) of this Contact.

No exceptions.

DOMString? givenName
This attribute contains the given name (also referred to as the first name) of this Contact.

No exceptions.

DOMString? middleName
This attribute contains the middle name of this Contact.

No exceptions.

DOMString? honorificPrefix
This attribute contains the honorific prefix (or title) of this Contact. E.g. Mr., Dr., Ms., Mrs.

No exceptions.

DOMString? honorificSuffix
This attribute contains the honorific suffix of this Contact. E.g. Jr, III, Sr.

No exceptions.

2.6. ContactField

The ContactField interface is a reusable component that is used to capture contact fields of the Contact interface that have some modicum of structure.

        [NoInterfaceObject]
        interface ContactField {

            attribute DOMString  type;

            attribute DOMString? value;

            attribute boolean    pref;
        };
Attributes

DOMString type
This attribute contains the type information for this ContactField and its content varies subject to the contact property this ContactField is representing. For example, if the ContactField is representing a phoneNumber property, the type attribute can be set to home, mobile; if the ContactField is representing the ims property, the type attribute could be set to xmpp, irc, bbm, etc.

No exceptions.

DOMString? value
This attribute contains the value for this ContactField and its content varies subject to the contact property this ContactField is representing. For example, if the ContactField is representing an email, the value attribute could be set to JoeSmith@example.com, and if the ContactField is representing a url, the value attribute can be set to http://www.example.org/joesmith, etc.

No exceptions.

boolean pref
This attribute indicates whether this instance of the ContactField is the preferred, or primary, value for the contact property this ContactField is representing in the Contact interface. By default, the value is false.

No exceptions.

2.7. ContactAddress

The ContactAddress interface is a reusable component that is used to capture addresses within the Contact interface.

        [NoInterfaceObject]
        interface ContactAddress {

            attribute boolean    pref;

            attribute DOMString? type;

            attribute DOMString? formatted;

            attribute DOMString? streetAddress;

            attribute DOMString? locality;

            attribute DOMString? region;

            attribute DOMString? postalCode;

            attribute DOMString? country;
        };
Attributes

boolean pref
This attribute indicates whether this instance of the ContactAddress is the preferred, or primary, value for the contact. By default, the value is false.

No exceptions.

DOMString? type
This attribute contains the type of address this object is representing (e.g. work, home, premises, etc).

No exceptions.

DOMString? formatted
This attribute contains the full physical address including street, locality, region, postalCode, and country as appropriate, and formatted for display.

No exceptions.

DOMString? streetAddress
This attribute contains the street address corresponding to this ContactAddress.

No exceptions.

DOMString? locality
This attribute contains the locality (or city) name corresponding to this ContactAddress.

No exceptions.

DOMString? region
This attribute contains the region (or state/province) name corresponding to this ContactAddress.

No exceptions.

DOMString? postalCode
This attribute contains the postal code (or zip) corresponding to this ContactAddress.

No exceptions.

DOMString? country
This attribute contains the country name corresponding to this ContactAddress.

No exceptions.

2.8. ContactOrganization

The ContactOrganization interface is a reusable component that is used to support contact organisations within the Contact interface.

     [NoInterfaceObject]
        interface ContactOrganization {

            attribute boolean    pref;

            attribute DOMString? type;

            attribute DOMString? name;

            attribute DOMString? department;

            attribute DOMString? title;
        };
Attributes

boolean pref
This attribute indicates whether this instance of the ContactOrganization is the preferred, or primary, value for the contact. By default, the value is false.

No exceptions.

DOMString? type
This attribute contains the type of organization this object is representing.

No exceptions.

DOMString? name
The name of the organisation.

No exceptions.

DOMString? department
The department within which this Contact works.

No exceptions.

DOMString? title
The job title that the Contact holds inside this organisation.

No exceptions.

2.9. ContactFindOptions

The ContactFindOptions interface describes the options that can be applied to contact searching. When a ContactFindOptions parameter is provided to the Contacts find() operation, it should be processed according to the provisions detailed in Options Processing.

        [NoInterfaceObject]
        interface ContactFindOptions {

            attribute DOMString? filter;

            attribute boolean?   multiple;

            attribute Date      updatedSince;
        };
Attributes

DOMString? filter
A string-based search filter which provides a hint to the user agent to facilitate contacts selection by the user.

No exceptions.

boolean? multiple
A boolean value to indicate whether multiple Contact objects are wanted as part of the Contacts find() operation. By default this option is set to false.

No exceptions.

Date updatedSince
Return only contact records that have been updated on or after the given time, specified as an ECMAScript Date object.

This filter is applied to the revision field as defined in Contact.

No exceptions.

2.10. ContactFindCB

This is the wrapper interface for callbacks indicating success of the find() operation.

        [Callback=FunctionOnly, NoInterfaceObject]
        interface ContactFindCB {        

            void onsuccess (Contact[] contactObjs);
        };
Methods

onsuccess
Callback on success of a find() operation

Signature

void onsuccess(
              Contact
            [] contactObjs);
Parameters

contactObjs
Optional: No.
Nullable: No
Type: array
Description: An array of Contact objects resulting from the given Contacts find() operation.
Return value

void
2.11. ContactErrorCB

This is the wrapper interface for callbacks indicating failure of the find() operation.

        [Callback=FunctionOnly, NoInterfaceObject]
        interface ContactErrorCB  {        

              void onerror (ContactError error);
        };
Methods

onerror
Callback on failure of a find() operation

Signature

void onerror(ContactError error);
Parameters

error
Optional: No.
Nullable: No
Type: ContactError
Description: The ContactError object capturing the type of the error.
Return value

void
3. Features

This is the list of URIs used to declare this API's features, for use in the widget config.xml and as identifier for service type in service discovery functionality. For each URI, the list of functions covered is provided.

http://www.w3.org/ns/api-perms/contacts.read
Read access to the address book.
4. Full WebIDL

module ContactsWrapper {

         [NoInterfaceObject]
        interface ContactError {

            const unsigned short UNKNOWN_ERROR = 0;

            const unsigned short INVALID_ARGUMENT_ERROR = 1;

            const unsigned short TIMEOUT_ERROR = 2;

            const unsigned short PENDING_OPERATION_ERROR = 3;

            const unsigned short IO_ERROR = 4;

            const unsigned short NOT_SUPPORTED_ERROR = 5;

            const unsigned short PERMISSION_DENIED_ERROR = 20;

            readonly attribute unsigned short code;
        };
        
        

        [NoInterfaceObject]
        interface ServiceContacts {

                    readonly attribute Contacts contacts;
        };  
        

        
        [NoInterfaceObject]
        interface Contacts {


            caller void find (DOMString[] fields, ContactFindCB successCB, optional ContactErrorCB errorCB, optional ContactFindOptions options);
        };
  



        [NoInterfaceObject]
        interface Contact {
                        

             readonly attribute DOMString              id;

             attribute DOMString?             displayName;

             attribute  ContactName           name;

             attribute DOMString?             nickname;

             attribute ContactField[]?        phoneNumbers;

             attribute ContactField[]?        emails;

             attribute ContactAddress[]?      addresses;

             attribute ContactField[]?        ims;

             attribute ContactOrganization[]? organizations;

             attribute Date?                  revision;

             attribute Date?                  birthday;

             attribute DOMString?             gender;

             attribute DOMString?             note;

             attribute ContactField[]?        photos;

             attribute DOMString[]?           categories;

             attribute ContactField[]?        urls;

             attribute DOMString?             timezone;
        };
        

      [NoInterfaceObject]
        interface ContactName {

            attribute DOMString? formatted;

            attribute DOMString? familyName;

            attribute DOMString? givenName;

            attribute DOMString? middleName;

            attribute DOMString? honorificPrefix;

            attribute DOMString? honorificSuffix;
        };

        

        [NoInterfaceObject]
        interface ContactField {

            attribute DOMString  type;

            attribute DOMString? value;

            attribute boolean    pref;
        };
        
        

        [NoInterfaceObject]
        interface ContactAddress {

            attribute boolean    pref;

            attribute DOMString? type;

            attribute DOMString? formatted;

            attribute DOMString? streetAddress;

            attribute DOMString? locality;

            attribute DOMString? region;

            attribute DOMString? postalCode;

            attribute DOMString? country;
        };
     

     [NoInterfaceObject]
        interface ContactOrganization {

            attribute boolean    pref;

            attribute DOMString? type;

            attribute DOMString? name;

            attribute DOMString? department;

            attribute DOMString? title;
        };
        

        [NoInterfaceObject]
        interface ContactFindOptions {

            attribute DOMString? filter;

            attribute boolean?   multiple;

            attribute Date      updatedSince;
        };


        [Callback=FunctionOnly, NoInterfaceObject]
        interface ContactFindCB {        

            void onsuccess (Contact[] contactObjs);
        };
        

        [Callback=FunctionOnly, NoInterfaceObject]
        interface ContactErrorCB  {        

              void onerror (ContactError error);
        };
        
};