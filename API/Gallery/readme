Abstract

W3C based Gallery API interface.

Table of Contents

1. Introduction
2. Interfaces
2.1. Gallery
2.2. MediaObject
2.3. GalleryInfo
2.4. GalleryFindOptions
2.5. GalleryFindCB
2.6. GalleryInfoCB
2.7. GalleryErrorCB
2.8. GalleryError
3. Features
4. Full WebIDL
Summary of Methods

Interface	Method
Gallery	PendingOp find(DOMString [] fields, GalleryFindCB successCB, GalleryErrorCB errorCB, GalleryFindOptions options)
PendingOp getGalleries(GalleryInfoCB successCB, GalleryErrorCB errorCB)
MediaObject	
GalleryInfo	
GalleryFindOptions	
GalleryFindCB	void onSuccess(MediaObject [] mediaObjectObjs)
GalleryInfoCB	void onSuccess(GalleryInfo [] galleryInfoObjs)
GalleryErrorCB	void onError(GalleryError error)
GalleryError	
1. Introduction

This specification provides a wrapper that mandates the use of the W3C Gallery API (Editor's draft 4 November 2010) that provides access to media gallery located on the device.

The Gallery API defines a high-level interface for accessing media gallery located on the device. A media gallery is a collection of media objects such as video, audio and image. *

2. Interfaces

2.1. Gallery

The Gallery interface exposes an interface to access media gallery located on the device.

 [NoInterfaceObject] interface Gallery {

    const unsigned short AUDIO_TYPE = 0;

    const unsigned short VIDEO_TYPE = 1;

    const unsigned short IMAGE_TYPE = 2;

    const unsigned short SORT_BY_FILENAME = 3;

    const unsigned short SORT_BY_FILEDATE = 4;

    const unsigned short SORT_BY_MEDIATYPE = 5;

    const unsigned short SORT_BY_TITLE = 6;

    const unsigned short SORT_BY_AUTHOR = 7;

    const unsigned short SORT_BY_ALBUM = 8;

    const unsigned short SORT_BY_DATE = 9;

    const unsigned short SORT_BY_ASCENDING = 10;

    const unsigned short SORT_BY_DESCENDING = 11;

    readonly attribute unsigned long length;

    caller PendingOp find (in DOMString[] fields, in GalleryFindCB successCB, in optional GalleryErrorCB errorCB, in optional GalleryFindOptions options);

   caller PendingOp getGalleries (in GalleryInfoCB successCB, in optional GalleryErrorCB errorCB);
};
Code example

  // append images with a title matching 'foobar' from galleries 
 // not older than 3 months to the document.body
 
 var gallery = navigator.service.gallery;
 
 function getGalleriesSuccess(galleryInfoObjs) {
     var galleries = [];
     for (var i in galleryInfoObjs) {
         if ((new Date().getTime())-galleryInfoObjs[i].createDate  100*60*60*24*3) {
             galleries.push(galleryInfoObjs[i]);
         }
     }
     appendMedia(galleries);
 }
 
 function appendMedia(galleries) {
     function findSuccess(mediaObjs) {
         var container = document.createElement("div");
         for (var i in mediaObjs) {
             var img = document.createElement("img");
             var title = document.createElement("div");
             title.innerHTML = "Title: " + mediaObjs[i].title;
             // create blob URI using window.createObjectURL():
             // http://dev.w3.org/2006/webapi/FileAPI/#creating-revoking
             img.src = createObjectURL(mediaObjs[i]);
             container.appendChild(img);
             container.appendChild(title);
         }
         document.body.appendChild(container);
     }
         
     function findError() {
         console.log('whoops, something went wrong!');
     }
         
     gallery.find(['title', 'uri'], findSuccess, findError,
             {filter: 'foobar', galleries: galleries, mediaType: gallery.IMAGE_TYPE });
 }
 
 gallery.getGalleries(getGalleriesSuccess);
 
Constants

unsigned short AUDIO_TYPE
Constant used to identify audio type of media.

unsigned short VIDEO_TYPE
Constant used to identify video type of media.

unsigned short IMAGE_TYPE
Constant used to identify image type of media.

unsigned short SORT_BY_FILENAME
Constant used to identify sort by filename.

unsigned short SORT_BY_FILEDATE
Constant used to identify sort by file date.

unsigned short SORT_BY_MEDIATYPE
Constant used to identify sort by media type.

unsigned short SORT_BY_TITLE
Constant used to identify sort by title.

unsigned short SORT_BY_AUTHOR
Constant used to identify sort by author.

unsigned short SORT_BY_ALBUM
Constant used to identify sort by album.

unsigned short SORT_BY_DATE
Constant used to identify sort by date

unsigned short SORT_BY_ASCENDING
Constant used to identify ascending sort order.

unsigned short SORT_BY_DESCENDING
Constant used to identify ascending sort order.

Attributes

readonly unsigned long length
the number of media objects in the gallery.

No exceptions.

This attribute is readonly.
Methods

find
Find media objects in the gallerys according to the find process detailed below.

Signature

caller PendingOp find(in 
              DOMString
            [] fields, in GalleryFindCB successCB, in optional GalleryErrorCB errorCB, in optional GalleryFindOptions options);
This method takes two, three or four arguments. When called, it immediately returns a PendingOp object, as defined in [CORE-DEVICE], and then asynchronously starts a find process defined as follows:

1. If there are any tasks from the PendingOp task source in one of the task queues (i.e. an existing find() operation is still pending a response), and the current method was invoked with a non-null errorCB argument, dispatch an error event with a PENDING_OPERATION_ERROR code value.

2. Search for media object in the galleries

3. If the attempt was successful, dispatch a success event. If the attempt fails, and the method was invoked with a non-null errorCB argument, this method must dispatch an error event with the code attribute set according to the type of failure that has occurred.

No exceptions.

Parameters

fields
Optional: No.
Nullable: No
Type: array
Description: The search qualifier.
successCB
Optional: No.
Nullable: No
Type: GalleryFindCB
Description: Function to call when the asynchronous operation completes
errorCB
Optional: Yes.
Nullable: No
Type: GalleryErrorCB
Description: Function to call when the asynchronous operation fails.
options
Optional: Yes.
Nullable: No
Type: GalleryFindOptions
Description: The options to apply to the output of this method.
Return value

PendingOperation to cancel the asynchronous call
getGalleries
Retrieve all galleries from available sources(e.g. device local memory, external memory and even Fliker, Facebook, etc.) according to the retrieve process detailed below.

Signature

caller PendingOp getGalleries(in GalleryInfoCB successCB, in optional GalleryErrorCB errorCB);
This method takes one or two arguments. When called, it immediately returns a PendingOp object, as defined in [CORE-DEVICE], and then asynchronously starts a retrieve process defined as follows:

1. If there are any tasks from the PendingOp task source in one of the task queues (i.e. an existing find() operation is still pending a response), and the current method was invoked with a non-null errorCB argument, dispatch an error event with a PENDING_OPERATION_ERROR code value.

2. retrieve for all galleries

3. If the attempt was successful, dispatch a success event. If the attempt fails, and the method was invoked with a non-null errorCB argument, this method must dispatch an error event with the code attribute set according to the type of failure that has occurred.Find media objects in the gallerys according to the find process detailed below.

No exceptions.

Parameters

successCB
Optional: No.
Nullable: No
Type: GalleryInfoCB
Description: Function to call when the asynchronous operation completes
errorCB
Optional: Yes.
Nullable: No
Type: GalleryErrorCB
Description: Function to call when the asynchronous operation fails.
Return value

PendingOperation to cancel the asynchronous call
2.2. MediaObject

The Gallery interface exposes an interface to access media gallery located on the device.

[NoInterfaceObject] interface MediaObject : File {

    readonly attribute unsigned long   id;

    readonly attribute GalleryInfo     gallery;

    readonly attribute DOMString?       title;

    readonly attribute DOMString?       language;

    readonly attribute DOMString?       locator;

    readonly attribute DOMString?       contributor;

    readonly attribute DOMString?       Creator;

    readonly attribute Date?            CreateDate;

    readonly attribute DOMString?       location;

    readonly attribute DOMString?       description;

    readonly attribute DOMString?       keyword;

    readonly attribute DOMString?       genre;

    readonly attribute unsigned long?   rating;

    readonly attribute DOMString?       relation;

    readonly attribute DOMString?      collection;

    readonly attribute DOMString?       copyright;

    readonly attribute DOMString?       policy;

    readonly attribute DOMString?       publisher;

    readonly attribute DOMString?       targetAudience;

    readonly attribute DOMString?       fragment;

    readonly attribute DOMString?       namedFragment;

    readonly attribute unsigned long?   frameSize;

    readonly attribute DOMString?       compression;

    readonly attribute unsigned long?   duration;

    readonly attribute DOMString?       format;

    readonly attribute unsigned long?   samplingRate;

    readonly attribute unsigned long?   framerate;

    readonly attribute unsigned long?   averageBitRate;

    readonly attribute unsigned short?  numTracks;
};
Attributes

readonly unsigned long id
Unique id of media object. This id is a unique numeric identifiers of the object. This id is persistent while the gallery is opened.

No exceptions.

This attribute is readonly.
readonly GalleryInfo gallery
gallery information associated to the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? title
The title of the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? language
The language used in the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? locator
The logical address at which the media object can be accessed.

No exceptions.

This attribute is readonly.
readonly DOMString? contributor
The contributor related with the media object. e.g., actor, cameraman, director, singer, author, artist, etc.

No exceptions.

This attribute is readonly.
readonly DOMString? Creator
The author of the media object.

No exceptions.

This attribute is readonly.
readonly Date? CreateDate
The date and time the media object was originally created.

No exceptions.

This attribute is readonly.
readonly DOMString? location
The description where the media object has been created, developed, recorded, or otherwise authored.

No exceptions.

This attribute is readonly.
readonly DOMString? description
A free-form text describing the content of the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? keyword
A concept, descriptive phrase or keyword that specifies the topic of the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? genre
The category of the content of the media object.

No exceptions.

This attribute is readonly.
readonly unsigned long? rating
The rating value related with the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? relation
The description related with resource that the current media object is related with.

No exceptions.

This attribute is readonly.
readonly DOMString? collection
The name of the collection from which the media object originates or to which it belongs.

No exceptions.

This attribute is readonly.
readonly DOMString? copyright
The copyright statement. Identification of the copyrights holder.

No exceptions.

This attribute is readonly.
readonly DOMString? policy
A policy statement (typically human-readable) associated with the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? publisher
The publisher of a media object.

No exceptions.

This attribute is readonly.
readonly DOMString? targetAudience
The classification information related with media object including the issuer of the classification (e.g., a parental guidance issuing agency, or a targeted geographical region).

No exceptions.

This attribute is readonly.
readonly DOMString? fragment
A fragment identifier. A fragment is a portion of the resource

No exceptions.

This attribute is readonly.
readonly DOMString? namedFragment
A named fragment identifier.

No exceptions.

This attribute is readonly.
readonly unsigned long? frameSize
The frame size of the media object (e.g., width and height of 720 and 480 units, respectively).

No exceptions.

This attribute is readonly.
readonly DOMString? compression
The compression type used.

No exceptions.

This attribute is readonly.
readonly unsigned long? duration
The actual duration of the media object.

No exceptions.

This attribute is readonly.
readonly DOMString? format
The MIME type of the media object (e.g., wrapper or bucket media types).

No exceptions.

This attribute is readonly.
readonly unsigned long? samplingRate
The audio sampling rate.

No exceptions.

This attribute is readonly.
readonly unsigned long? framerate
The video frame rate.

No exceptions.

This attribute is readonly.
readonly unsigned long? averageBitRate
The average bit rate.

No exceptions.

This attribute is readonly.
readonly unsigned short? numTracks
The number of tracks of a resource.

No exceptions.

This attribute is readonly.
2.3. GalleryInfo

The GalleryInfo exposes an interface to capture generic metadata information of a gallery.

[NoInterfaceObject] interface GalleryInfo {

    readonly attribute DOMString   title;

    readonly attribute Date        createdDate;

    readonly attribute DOMString   location;

    readonly attribute DOMString[] description;

    readonly attribute DOMString[] supportedMediaObjectType;
};
Attributes

readonly DOMString title
The title of the gallery.

No exceptions.

This attribute is readonly.
readonly Date createdDate
The date and time the gallery was originally created.

No exceptions.

This attribute is readonly.
readonly DOMString location
The location the gallery is located on.

No exceptions.

This attribute is readonly.
readonly DOMString [] description
The description of the gallery.

No exceptions.

This attribute is readonly.
readonly DOMString [] supportedMediaObjectType
A list of media object type supported by this gallery.

No exceptions.

This attribute is readonly.
2.4. GalleryFindOptions

The GalleryFindOptions exposes an interface to describe the options that can be applied to media object searching and displaying.

[NoInterfaceObject] interface GalleryFindOptions {

    attribute DOMString?      filter;

    attribute short?          mediaType;

    attribute GalleryInfo[]?  gallery;

    attribute short?          order;

    attribute short?          firstSortOption;

    attribute short?          secondSortOption;

    attribute Date?           startDate;

    attribute Date?           endDate;
};
Attributes

DOMString? filter
A DOMString-based search filter with which to search. It's working based on the metadata of media object.

No exceptions.

short? mediaType
Specify the scope of media type for finding the media object

No exceptions.

GalleryInfo [] gallery
Specify the scope of gallery for finding the media object

No exceptions.

short? order
Specify wheither media objects are ordered in ascending or descending order. Default is an ascending order.

No exceptions.

short? firstSortOption
Primary criteria to order the media object of the gallery.

No exceptions.

short? secondSortOption
Second criteria to order the media object of the gallery.

No exceptions.

Date? startDate
Start date for performing the search. Media object with date previous to that date will not be returned.

No exceptions.

Date? endDate
End date for performing the search. Media object with date later to that date will not be returned.

No exceptions.

2.5. GalleryFindCB

find specific success callback.

[Callback=FunctionOnly, NoInterfaceObject] interface GalleryFindCB : PendingOp {

       void onSuccess (in MediaObject[] mediaObjectObjs);
};
Methods

onSuccess
Method invoked when the asynchronous call completes successfully

Signature

void onSuccess(in 
              MediaObject
            [] mediaObjectObjs);
No exceptions.

Parameters

mediaObjectObjs
Optional: No.
Nullable: No
Type: array
Description: The Media Object resulting from the given Gallery find() method.
Return value

void
2.6. GalleryInfoCB

getGalleries specific success callback.

[Callback=FunctionOnly, NoInterfaceObject] interface GalleryInfoCB : PendingOp {

    void onSuccess (in GalleryInfo[] galleryInfoObjs);
};
Methods

onSuccess
Method invoked when the asynchronous call completes successfully

Signature

void onSuccess(in 
              GalleryInfo
            [] galleryInfoObjs);
No exceptions.

Parameters

galleryInfoObjs
Optional: No.
Nullable: No
Type: array
Description: The GalleryInfo Objects resulting from the given Gallery getGalleries() method.
Return value

void
2.7. GalleryErrorCB

Gallery API specific error callback.

[Callback=FunctionOnly, NoInterfaceObject] interface GalleryErrorCB : PendingOp {

    void onError (in GalleryError error);
};
Methods

onError
Method invoked when the asynchronous call completes unsuccessfully

Signature

void onError(in GalleryError error);
No exceptions.

Parameters

error
Optional: No.
Nullable: No
Type: GalleryError
Description: The Gallery API related error object.
Return value

void
2.8. GalleryError

The GalleryError interface encapsulates all errors in the Gallery API.

[NoInterfaceObject] interface GalleryError {

    const unsigned short UNKNOWN_ERROR = 0;

    const unsigned short INVALID_ARGUMENT_ERROR = 1;

    const unsigned short TIMEOUT_ERROR = 2;

    const unsigned short PENDING_OPERATION_ERROR = 3;

    const unsigned short IO_ERROR = 4;

    const unsigned short NOT_SUPPORTED_ERROR = 5;

    const unsigned short PERMISSION_DENIED_ERROR = 20;

    readonly attribute unsigned short code;
};
Constants

unsigned short UNKNOWN_ERROR
An unknown error occurred.

unsigned short INVALID_ARGUMENT_ERROR
An invalid parameter was provided when the requested method was invoked.

unsigned short TIMEOUT_ERROR
The requested method timed out before it could be completed.

unsigned short PENDING_OPERATION_ERROR
If the user agent is currently waiting for a callback on a current find() operation, as defined in this specification.

unsigned short IO_ERROR
An error occurred in communication with the underlying implementation that meant the requested method could not complete.

unsigned short NOT_SUPPORTED_ERROR
The requested method is not supported by the current implementation.

unsigned short PERMISSION_DENIED_ERROR
Attributes

readonly unsigned short code
An error code assigned by an implementation when an error has occurred in Gallery API processing.

No exceptions.

This attribute is readonly.
3. Features

4. Full WebIDL

module gallery {


 


 [NoInterfaceObject] interface Gallery {

    const unsigned short AUDIO_TYPE = 0;

    const unsigned short VIDEO_TYPE = 1;

    const unsigned short IMAGE_TYPE = 2;

    const unsigned short SORT_BY_FILENAME = 3;

    const unsigned short SORT_BY_FILEDATE = 4;

    const unsigned short SORT_BY_MEDIATYPE = 5;

    const unsigned short SORT_BY_TITLE = 6;

    const unsigned short SORT_BY_AUTHOR = 7;

    const unsigned short SORT_BY_ALBUM = 8;

    const unsigned short SORT_BY_DATE = 9;

    const unsigned short SORT_BY_ASCENDING = 10;

    const unsigned short SORT_BY_DESCENDING = 11;

    readonly attribute unsigned long length;

    caller PendingOp find (in DOMString[] fields, in GalleryFindCB successCB, in optional GalleryErrorCB errorCB, in optional GalleryFindOptions options);

   caller PendingOp getGalleries (in GalleryInfoCB successCB, in optional GalleryErrorCB errorCB);
};


[NoInterfaceObject] interface MediaObject : File {

    readonly attribute unsigned long   id;

    readonly attribute GalleryInfo     gallery;

    readonly attribute DOMString?       title;

    readonly attribute DOMString?       language;

    readonly attribute DOMString?       locator;

    readonly attribute DOMString?       contributor;

    readonly attribute DOMString?       Creator;

    readonly attribute Date?            CreateDate;

    readonly attribute DOMString?       location;

    readonly attribute DOMString?       description;

    readonly attribute DOMString?       keyword;

    readonly attribute DOMString?       genre;

    readonly attribute unsigned long?   rating;

    readonly attribute DOMString?       relation;

    readonly attribute DOMString?      collection;

    readonly attribute DOMString?       copyright;

    readonly attribute DOMString?       policy;

    readonly attribute DOMString?       publisher;

    readonly attribute DOMString?       targetAudience;

    readonly attribute DOMString?       fragment;

    readonly attribute DOMString?       namedFragment;

    readonly attribute unsigned long?   frameSize;

    readonly attribute DOMString?       compression;

    readonly attribute unsigned long?   duration;

    readonly attribute DOMString?       format;

    readonly attribute unsigned long?   samplingRate;

    readonly attribute unsigned long?   framerate;

    readonly attribute unsigned long?   averageBitRate;

    readonly attribute unsigned short?  numTracks;
};



[NoInterfaceObject] interface GalleryInfo {

    readonly attribute DOMString   title;

    readonly attribute Date        createdDate;

    readonly attribute DOMString   location;

    readonly attribute DOMString[] description;

    readonly attribute DOMString[] supportedMediaObjectType;
};

[NoInterfaceObject] interface GalleryFindOptions {

    attribute DOMString?      filter;

    attribute short?          mediaType;

    attribute GalleryInfo[]?  gallery;

    attribute short?          order;

    attribute short?          firstSortOption;

    attribute short?          secondSortOption;

    attribute Date?           startDate;

    attribute Date?           endDate;
};


[Callback=FunctionOnly, NoInterfaceObject] interface GalleryFindCB : PendingOp {

       void onSuccess (in MediaObject[] mediaObjectObjs);
};


[Callback=FunctionOnly, NoInterfaceObject] interface GalleryInfoCB : PendingOp {

    void onSuccess (in GalleryInfo[] galleryInfoObjs);
};

[Callback=FunctionOnly, NoInterfaceObject] interface GalleryErrorCB : PendingOp {

    void onError (in GalleryError error);
};


[NoInterfaceObject] interface GalleryError {

    const unsigned short UNKNOWN_ERROR = 0;

    const unsigned short INVALID_ARGUMENT_ERROR = 1;

    const unsigned short TIMEOUT_ERROR = 2;

    const unsigned short PENDING_OPERATION_ERROR = 3;

    const unsigned short IO_ERROR = 4;

    const unsigned short NOT_SUPPORTED_ERROR = 5;

    const unsigned short PERMISSION_DENIED_ERROR = 20;

    readonly attribute unsigned short code;
};

};