Abstract

This document describes the functionality that Webinos devices should implement for retrieving device status information.

Table of Contents

1 - Introduction
2 - API
3 - Security
4 - WebIDL
References
1 - Introduction

This section is INFORMATIVE.

Webinos is fully committed to the use of Open Standards whenever available. The access to Device Status information is done through the WAC Device Status API [DEVICESTATUS].

2 - API

This section is NORMATIVE.

Webinos implementations MUST support WAC Device Status specification [DEVICESTATUS]. The implementations MUST also support the vocabulary defined by Webinos [WEBINOSVOC] for accessing the device status information.

In order to use this API, access to it must be declared in the widget configuration document (i.e. config.xml). This declaration is done through the features http://wacapps.net/api/devicestatus, http://wacapps.net/api/devicestatus.deviceinfo or http://wacapps.net/api/devicestatus.networkinfo.

3 - Security

This section is NORMATIVE.

The implementation MUST NOT enable access to this API by default, but only if the declaration is present in the widget configuration document through the appropriate feature tag.

Please note that Webinos Security Framework, depending on its configuration and in the widget level of trust, MAY deny access to this API even if it is declared in the configuration document.

4 - WebIDL

This section is INFORMATIVE.

For completeness, this specification includes a copy of the WebIDL declaration included in the WAC Device Status specification [DEVICESTATUS]. The referred specification includes all the details needed to create a conformant implementation as well as a reference to the WAC Vocabulary [DEVICESTATUSVOC]. Please note that Webinos does not use WAC Vocabulary but a Webinos specific one [WEBINOSVOC].

DeviceapisDeviceStatusManager Interface
[NoInterfaceObject] interface DeviceapisDeviceStatusManager {
    readonly attribute DeviceStatusManager devicestatus; 
};
webinos implements DeviceapisDeviceStatusManager;
DeviceStatusManager Interface
[NoInterfaceObject] interface DeviceStatusManager {

    StringArray getComponents(in DOMString aspect)
        raises(DeviceAPIError);

    boolean isSupported(in DOMString aspect, 
                        [TreatUndefinedAs=Null] in optional DOMString? property)
                        raises(DeviceAPIError);  

    PendingOperation getPropertyValue(in PropertyValueSuccessCallback successCallback, 
                                      in ErrorCallback errorCallback,
                                      in PropertyRef prop)
                                      raises(DeviceAPIError);

    long watchPropertyChange(in PropertyValueSuccessCallback successCallback,
                             in ErrorCallback errorCallback,
                             in PropertyRef prop,
                             in optional WatchOptions options)
                             raises(DeviceAPIError);

    void clearPropertyChange(in unsigned long watchHandler)
                             raises(DeviceAPIError);
  };
PropertyRef Interface
[Callback, NoInterfaceObject] interface PropertyRef {

    attribute DOMString component;

    attribute DOMString aspect;

    attribute DOMString property;
  };
  
WatchOptions Interface
[Callback, NoInterfaceObject] interface WatchOptions {
    attribute long minNotificationInterval;

    attribute long maxNotificationInterval;
  
    attribute long minChangePercent;  
  };

DeviceAPIError Interface
  [NoInterfaceObject] interface DeviceAPIError {
    readonly attribute unsigned short code;

    readonly attribute DOMString message;

    const unsigned short      UNKNOWN_ERR                    = 0;

    const unsigned short      INDEX_SIZE_ERR                 = 1;
    const unsigned short      DOMSTRING_SIZE_ERR             = 2;
    const unsigned short      HIERARCHY_REQUEST_ERR          = 3;
    const unsigned short      WRONG_DOCUMENT_ERR             = 4;
    const unsigned short      INVALID_CHARACTER_ERR          = 5;
    const unsigned short      NO_DATA_ALLOWED_ERR            = 6;
    const unsigned short      NO_MODIFICATION_ALLOWED_ERR    = 7;
    const unsigned short      NOT_FOUND_ERR                  = 8;

    const unsigned short      NOT_SUPPORTED_ERR              = 9;
    const unsigned short      INUSE_ATTRIBUTE_ERR            = 10;
    const unsigned short      INVALID_STATE_ERR              = 11;
    const unsigned short      SYNTAX_ERR                     = 12;
    const unsigned short      INVALID_MODIFICATION_ERR       = 13;
    const unsigned short      NAMESPACE_ERR                  = 14;
    const unsigned short      INVALID_ACCESS_ERR             = 15;
    const unsigned short      VALIDATION_ERR                 = 16;

    const unsigned short      TYPE_MISMATCH_ERR              = 17;
  
    const unsigned short      SECURITY_ERR                   = 18;

    const unsigned short      NETWORK_ERR                    = 19;
  
    const unsigned short      ABORT_ERR                      = 20;

    const unsigned short      TIMEOUT_ERR                    = 21;

    const unsigned short      INVALID_VALUES_ERR             = 22;
    const unsigned short      NOT_AVAILABLE_ERR              = 101;
  };
PropertyValueSucessCallback Interface
 [Callback=FunctionOnly, NoInterfaceObject] interface GetPropertySuccessCallback {
    void onpropertyvalue(in Object value, in PropertyRef property);
  };
ErrorCallback Interface
[Callback=FunctionOnly, NoInterfaceObject] interface ErrorCallback {
   void onerror(in DeviceAPIError error);
};
PendingOperation Interface
[NoInterfaceObject] interface PendingOperation {
   boolean cancel();
 };