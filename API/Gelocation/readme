Abstract

This document describes the functionality that Webinos devices should implement for retrieving geographical information.

Table of Contents

1 - Introduction
2 - API
3 - Security
4 - WebIDL
References
1 - Introduction

This section is INFORMATIVE.

Webinos is fully committed to the use of Open Standards whenever available. The access to Geolocation is done through the W3C Geolocation API [GEOLOCATION].

This module is loaded (as W3C specification mandates) in the Navigator interface with the name geolocation (i.e. navigator.geolocation).

2 - API

This section is NORMATIVE.

Webinos implementations MUST support W3C Geolocation specification [GEOLOCATION].

In order to use this API, access to it must be declared in the widget configuration document (i.e. config.xml). This declaration is done through the feature http://www.w3.org/ns/api-perms/geolocation.

3 - Security

This section is NORMATIVE.

The implementation MUST NOT enable access to this API by default, but only if the declaration is present in the widget configuration document through the appropriate feature tag.

Please note that Webinos Security Framework, depending on its configuration and in the widget level of trust, MAY deny access to this API even if it is declared in the configuration document.

4 - WebIDL

This section is INFORMATIVE.

For completeness, this specification includes a copy of the WebIDL declaration included in the W3C Geolocation specification [GEOLOCATION]. The referred specification includes all the details needed to create a conformant implementation.

Geolocation Instatiation
 [NoInterfaceObject]
 interface NavigatorGeolocation {
   readonly attribute Geolocation geolocation;
 };

 Navigator implements NavigatorGeolocation;
Geolocation Interface
[NoInterfaceObject]
 interface Geolocation { 
   void getCurrentPosition(in PositionCallback successCallback,
                           in optional PositionErrorCallback errorCallback,
                           in optional PositionOptions options);

   long watchPosition(in PositionCallback successCallback,
                      in optional PositionErrorCallback errorCallback,
                      in optional PositionOptions options);

   void clearWatch(in long watchId);
 };

 [Callback=FunctionOnly, NoInterfaceObject]
 interface PositionCallback {
   void handleEvent(in Position position);
 };

 [Callback=FunctionOnly, NoInterfaceObject]
 interface PositionErrorCallback {
   void handleEvent(in PositionError error);
 };
Position Options
  [Callback, NoInterfaceObject]
  interface PositionOptions {
    attribute boolean enableHighAccuracy;
    attribute long timeout;
    attribute long maximumAge;
  };
Position Interface

 interface Position {
    readonly attribute Coordinates coords;
    readonly attribute DOMTimeStamp timestamp;
  };
Coordinates Interface
interface Coordinates {
    readonly attribute double latitude;
    readonly attribute double longitude;
    readonly attribute double? altitude;
    readonly attribute double accuracy;
    readonly attribute double? altitudeAccuracy;
    readonly attribute double? heading;
    readonly attribute double? speed;
  };
PositionError Interface
interface PositionError {
    const unsigned short PERMISSION_DENIED = 1;
    const unsigned short POSITION_UNAVAILABLE = 2;
    const unsigned short TIMEOUT = 3;
    readonly attribute unsigned short code;
    readonly attribute DOMString message;
  };