Abstract

Webinos widget interfaces

Table of Contents

1. Introduction
2. Interfaces
2.1. NotifySuccessCallback
2.2. NotifyErrorCallback
2.3. DeploymentSuccessCallback
2.4. DeploymentErrorCallback
2.5. DeploymentError
2.6. Widget
2.7. WindowWidget
3. Features
4. Full WebIDL
Summary of Methods

Interface	Method
NotifySuccessCallback	void onSuccess(DOMString id)
NotifyErrorCallback	void onError(DOMString id)
DeploymentSuccessCallback	void onSuccess(DOMString childID, DOMString serviceID)
DeploymentErrorCallback	void onError(DeploymentError error)
DeploymentError	
Widget	void exit()
void hide()
boolean isHidden()
void notify(NotifySuccessCallback onSuccess, NotifyErrorCallback onError, DOMString title, DOMString shortDescription, DOMString id, DOMString icon)
void cancelNotify(DOMString id)
void onDestroy()
void onBackground()
void onForeground()
void onStop()
void onStart()
void deployChild(DeploymentSuccessCallback onSuccess, DeploymentErrorCallback onError, DOMString childApplicationID, boolean local)
WindowWidget	
1. Introduction

This specification defines the common widget interface. The webinos application packaging is based on W3C Widget Specifications, thus, the interface definition is also based on W3C. Namely W3C Widget Interface (http://www.w3.org/TR/2011/WD-widgets-apis-20110607/). This specification recaptures the W3C specification while adding webinos specific extensions.

2. Interfaces

2.1. NotifySuccessCallback

Callback for successfull notifications

   [NoInterfaceObject] interface NotifySuccessCallback {
 
    void onSuccess(in DOMString id);
  };
Methods

onSuccess
Accepted Notification.

Signature

void onSuccess(in DOMString id);
Called if an event was accepted by the user. If provided, the notification id is provided to link the success callback to a specific notification request.

Parameters

id
Optional: No.
Nullable: No
Type: DOMString
Description: the optional id of the notification request or null if no id was provided.
2.2. NotifyErrorCallback

Callback for failed notifications

   [NoInterfaceObject] interface NotifyErrorCallback {
 
    void onError(in DOMString id);
  };
Methods

onError
Discarded Notification.

Signature

void onError(in DOMString id);
Called if an event was not accepted by the user. If provided, the notification id is passed in to link the error to a specific notification request.

Parameters

id
Optional: No.
Nullable: No
Type: DOMString
Description: the optional id of the notification request or null if no id was provided.
2.3. DeploymentSuccessCallback

Callback for successfull installations

   [NoInterfaceObject] interface DeploymentSuccessCallback {

     void onSuccess(in DOMString childID, in DOMString serviceID);
   };
Methods

onSuccess
Called when an application was successfully deployed.

Signature

void onSuccess(in DOMString childID, in DOMString serviceID);
Called when an application was successfully deployed on another device using deployChild.

Parameters

childID
Optional: No.
Nullable: No
Type: DOMString
Description: is the application id which was used during deployChild and declared in the manifest
serviceID
Optional: No.
Nullable: No
Type: DOMString
Description: is the unique application instance id that can be used to explicitly address the deployed service within webinos service discovery
2.4. DeploymentErrorCallback

Callback for failed installations

   [Callback=FunctionOnly, NoInterfaceObject] interface DeploymentErrorCallback {
 
      void onError (in DeploymentError error);
    };
Methods

onError
Failled installions.

Signature

void onError(in DeploymentError error);
Called if an installation was not accepted by the user or any other error occurred.

Parameters

error
Optional: No.
Nullable: No
Type: DeploymentError
Description: The Widget API related error object of an unsuccessful application installation operation.
Return value

void
2.5. DeploymentError

Application installation specific errors.

    interface DeploymentError {
      const unsigned short INSTALLATION_CANCELED_BY_USER = 101;
      
      const unsigned short PERMISSION_DENIED_ERROR  = 102;
                       
      const unsigned short NOT_REACHABLE  = 103;
      
      const unsigned short UNKNOWN_APPLICATION_ID  = 104;
         
      const unsigned short ALREADY_INSTALLED = 105;
                       
      const unsigned short INSTALLATION_ERROR_OTHER = 106;

      readonly attribute unsigned short code;
      
      readonly attribute DOMString applicationID;
  };
The DeploymentError interface encapsulates all errors related to installation of applications. on the same or on other devices using the deploy function.

Constants

unsigned short INSTALLATION_CANCELED_BY_USER
Installation was cancelled by the user.

unsigned short PERMISSION_DENIED_ERROR
Not Authorized to use the service.

unsigned short NOT_REACHABLE
Device where the application should be installed on is not reachable. Consider retrying later.

unsigned short UNKNOWN_APPLICATION_ID
Device where the application should be installed on is not reachable. Consider retrying later.

unsigned short ALREADY_INSTALLED
Already Installed.

unsigned short INSTALLATION_ERROR_OTHER
Any other error.

Attributes

readonly unsigned short code
An error code assigned by an implementation when an error has occurred.

This attribute is readonly.
readonly DOMString applicationID
The application ID the error relates to.

This attribute is readonly.
2.6. Widget

Widget Interface

  interface Widget {
    
    readonly attribute DOMString     distributor;
    
    readonly attribute DOMString     distributorEmail;
    
    readonly attribute DOMString     distributorHref;
    
    readonly attribute DOMString     versionName;
    
    readonly attribute unsigned long long validfor;
    
    readonly attribute unsigned long long validuntil;

   
    readonly attribute DOMString     author;
    
    readonly attribute DOMString     authorEmail;
    
    readonly attribute DOMString     authorHref;
    
    readonly attribute DOMString     description;
    
    readonly attribute DOMString     id;
    
    readonly attribute DOMString     name;
    
    readonly attribute DOMString     shortName;
    
        readonly attribute Storage       preferences;
        
    readonly attribute DOMString     version;
    
    readonly attribute unsigned long height;
    
    readonly attribute unsigned long width;
    
    void exit();

    void hide();

    boolean isHidden();

    void notify(in NotifySuccessCallback onSuccess, in NotifyErrorCallback onError, in DOMString title, in optional DOMString shortDescription, in optional DOMString id, in optional DOMString icon);

    void cancelNotify(in DOMString id);

    void onDestroy();

    void onBackground();

    void onForeground();

    void onStop();

    void onStart();
    
    void deployChild(in DeploymentSuccessCallback onSuccess, in DeploymentErrorCallback onError, in DOMString childApplicationID, in optional boolean local);
  };
Defines that the webinos interface is part of the window global object.

Attributes

readonly DOMString distributor
An distributor attribute that represents people or an organization that distributed the widget.

This attribute is readonly.
readonly DOMString distributorEmail
A string attribute that represents an email address associated with the distributor.

This attribute is readonly.
readonly DOMString distributorHref
A string attribute that represents an email address associated with the distributor.

This attribute is readonly.
readonly DOMString versionName
A human readable version name.

This attribute is readonly.
readonly unsigned long long validfor
The validfor attributed defines a time interval until when the application is valid and can be used.

The time frame is specified in elapsed milliseconds after the first application execution.

This attribute is readonly.
readonly unsigned long long validuntil
The validuntil attributed defines a date and time until the application is valid and can be used.

The time frame is specified as in milliseconds whereas the date and time is encoded as milliseconds since midnight of January 1, 1970, according to universal time.

This attribute is readonly.
readonly DOMString author
An author attribute that represents people or an organization attributed with the creation of the widget.

This attribute is readonly.
readonly DOMString authorEmail
A string attribute that represents an email address associated with the author.

This attribute is readonly.
readonly DOMString authorHref
An IRI attribute whose value represents an IRI that the author associates with himself or herself (e.g., a homepage, a profile on a social network, etc.).

This attribute is readonly.
readonly DOMString description
The description element represents a human-readable description of the widget.

This attribute is readonly.
readonly DOMString id
An IRI attribute that denotes an identifier for the widget.

This attribute is readonly.
readonly DOMString name
The name element represents the full human-readable name for a widget that is used, for example, in an application menu or in other contexts.

This attribute is readonly.
readonly DOMString shortName
A displayable-string attribute intended to represent a condensed name for a widget (e.g., a name that could be used in context were only limited space is available, such as underneath an icon).

This attribute is readonly.
readonly Storage preferences
The preference element allows authors to access preferences declared in the manifest file.

For a complete definition of the Storage attribute please read the W3C specification of the storage attribute in the Widget specification (http://www.w3.org/TR/2011/WD-widgets-apis-20110607/).

This attribute is readonly.
readonly DOMString version
A version attribute that specifies the version of the widget.

This attribute is readonly.
readonly unsigned long height
A numeric attribute greater than 0 that indicates the preferred viewport height of the instantiated custom start file in CSS pixels.

This attribute is readonly.
readonly unsigned long width
A numeric attribute greater than 0 that indicates the preferred viewport width of the instantiated custom start file in CSS pixels.

This attribute is readonly.
Methods

exit
Close the running application.

Signature

void exit();
Allows an application to trigger calling destroy from the runtime which results in stopping the application execution and closing the application.

Code example

 
 //terminate the widget by its own
 window.widget.exit();

 
hide
Hide the running application.

Signature

void hide();
Sends the application to background if possible so that it is not visible to the user anymore if possible by the platform the application execution goes on

Code example

 
 //the widget is not visible anymore if possible
 window.widget.hide();

 
isHidden
Checks visibility status.

Signature

boolean isHidden();
Asks the WRT wheather the application is currently hidden (not visible to the user) or not if the application is hidden and want to come to foreground it may notify an event to the user.

Code example

 
 if (window.widget.isHidden()){
    //do things, e.g., create a notification
 };

 
notify
Issues a notification to the user.

Signature

void notify(in NotifySuccessCallback onSuccess, in NotifyErrorCallback onError, in DOMString title, in optional DOMString shortDescription, in optional DOMString id, in optional DOMString icon);
Triggers the WRT to notify occurence of an event, as described using the parameters, to the user The user can click the event. If the application is in background the application must be brought to foreground. After that onSuccess is called.

Triggers the WRT to notify occurrence of an event, as described using the parameters, to the user The user can click the event or reject it. If the application is in background and the user accepted the event, e.g., by clicking on it, the application must be brought back to foreground. The notify success callback is then called after onForeground was called.

Parameters

onSuccess
Optional: No.
Nullable: No
Type: NotifySuccessCallback
Description: NotifySuccessCallback issued when the user accepts the notification.
onError
Optional: No.
Nullable: No
Type: NotifyErrorCallback
Description: ErrorCallback issued when the notification is discarded.
title
Optional: No.
Nullable: No
Type: DOMString
Description: A short title describing the notification.
shortDescription
Optional: Yes.
Nullable: No
Type: DOMString
Description: A short description about the notification.
id
Optional: Yes.
Nullable: No
Type: DOMString
Description: An local identifier that represents the event and can be used to cancel the event or to take actions within the callbacks.
icon
Optional: Yes.
Nullable: No
Type: DOMString
Description: A relative path within the application package to an icon describing the notification.
Code example

 function error(id){ 
    if (id == "1"){
        //e.g, clear new e-mail list
   }
 }

 function success(id){
   if (id == "1"){
        //e.g, show new e-mails
   }
   else{
      if (id == "2"){
         //e.g, show new SMS messages
      }
   }
 }
 
 window.widget.notify(success, error, "New Emails", "You have 5 new E-Mails", 1);

 
cancelNotify
Cancels an ongoing notification.

Signature

void cancelNotify(in DOMString id);
To cancel a previous notify because it is updated or expired (if ongoing / not clicked by the user)

Parameters

id
Optional: No.
Nullable: No
Type: DOMString
Description: The notification id to cancel.
Code example

 
 //cancel notifications with id 1
 window.widget.cancelNotify("1");

 
onDestroy
Asynchronous callback indicating that the application will be terminated.

Signature

void onDestroy();
Callback function which is called if the application will be shut down by the WRT. All application memory assigned to the application will be freed after returning out of this function.

onBackground
Asynchronous callback indicating that the application is gone to background.

Signature

void onBackground();
Callback function which is called after the application was put to background, e.g., another application goes to foreground and the application is not visible any more. After calling onBackground the application is still running but not visible anymore.

onForeground
Asynchronous callback indicating that the application is gone to foreground.

Signature

void onForeground();
Application goes to foreground after previously going to background.

onStop
Asynchronous callback indicating that application execution is going to be stopped.

Signature

void onStop();
Application execution is stopped aftern returning out of this function.

onStart
Asynchronous callback indicating that application execution is continued.

Signature

void onStart();
Application execution is continued after previously stopped.

deployChild
Requests to install an application on another device.

Signature

void deployChild(in DeploymentSuccessCallback onSuccess, in DeploymentErrorCallback onError, in DOMString childApplicationID, in optional boolean local);
Deploys a child application known to the WRT through the definition in the application s manifest file on another device. If local = false or not specified the WRT has to provide a list of available devices to the user where the application should be installed on, if local = true the WRT has to install the selected child on the same device as the API is bound to.

Parameters

onSuccess
Optional: No.
Nullable: No
Type: DeploymentSuccessCallback
Description: SuccessCallback called after successfull installation.
onError
Optional: No.
Nullable: No
Type: DeploymentErrorCallback
Description: ErrorCallback called if installation was not possible.
childApplicationID
Optional: No.
Nullable: No
Type: DOMString
Description: the application ID of the child package to be installed.
local
Optional: Yes.
Nullable: No
Type: boolean
Description: Indicates if application should be installed on the same device as the requesting application or not.
Code example

 function error(){ 
   //installation failed
 }

 function success(childID, serviceID){
   //application was successfully deployed
   //serviceID can be used for discovery to bind directly to this application
   //if functions are exposed by the application
 }

 //installing child application with name child1.wgt on the same device 
 window.widget.deployChild(success, error, "child1.wgt", true);

 
2.7. WindowWidget

The WindowWidget interface describes the part of the Widget API accessible through the window object.

  [Supplemental, NoInterfaceObject]interface WindowWidget {
     readonly attribute Widget widget;
   };
  Window implements WindowWidget;
3. Features

4. Full WebIDL

module widget {

   [NoInterfaceObject] interface NotifySuccessCallback {
 
    void onSuccess(in DOMString id);
  };
  
   [NoInterfaceObject] interface NotifyErrorCallback {
 
    void onError(in DOMString id);
  };
  
   [NoInterfaceObject] interface DeploymentSuccessCallback {

     void onSuccess(in DOMString childID, in DOMString serviceID);
   };
   
   [Callback=FunctionOnly, NoInterfaceObject] interface DeploymentErrorCallback {
 
      void onError (in DeploymentError error);
    };
  
    interface DeploymentError {
      const unsigned short INSTALLATION_CANCELED_BY_USER = 101;
      
      const unsigned short PERMISSION_DENIED_ERROR  = 102;
                       
      const unsigned short NOT_REACHABLE  = 103;
      
      const unsigned short UNKNOWN_APPLICATION_ID  = 104;
         
      const unsigned short ALREADY_INSTALLED = 105;
                       
      const unsigned short INSTALLATION_ERROR_OTHER = 106;

      readonly attribute unsigned short code;
      
      readonly attribute DOMString applicationID;
  };  
  



  interface Widget {
    
    readonly attribute DOMString     distributor;
    
    readonly attribute DOMString     distributorEmail;
    
    readonly attribute DOMString     distributorHref;
    
    readonly attribute DOMString     versionName;
    
    readonly attribute unsigned long long validfor;
    
    readonly attribute unsigned long long validuntil;

   
    readonly attribute DOMString     author;
    
    readonly attribute DOMString     authorEmail;
    
    readonly attribute DOMString     authorHref;
    
    readonly attribute DOMString     description;
    
    readonly attribute DOMString     id;
    
    readonly attribute DOMString     name;
    
    readonly attribute DOMString     shortName;
    
        readonly attribute Storage       preferences;
        
    readonly attribute DOMString     version;
    
    readonly attribute unsigned long height;
    
    readonly attribute unsigned long width;
    
    void exit();

    void hide();

    boolean isHidden();

    void notify(in NotifySuccessCallback onSuccess, in NotifyErrorCallback onError, in DOMString title, in optional DOMString shortDescription, in optional DOMString id, in optional DOMString icon);

    void cancelNotify(in DOMString id);

    void onDestroy();

    void onBackground();

    void onForeground();

    void onStop();

    void onStart();
    
    void deployChild(in DeploymentSuccessCallback onSuccess, in DeploymentErrorCallback onError, in DOMString childApplicationID, in optional boolean local);
  };
  
  [Supplemental, NoInterfaceObject]interface WindowWidget {
     readonly attribute Widget widget;
   };
   
  Window implements WindowWidget;

};