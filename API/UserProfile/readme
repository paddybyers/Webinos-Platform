Abstract

The webinos userprofile API to access user information.

Table of Contents

1. Introduction
2. Interfaces
2.1. UserProfileInterface
2.2. UserProfile
2.3. SocialNetworkProfile
2.4. UserProfileFindOptions
2.5. UserProfileError
2.6. UserProfileErrorCB
2.7. UserProfileFindCB
2.8. WebinosUserProfile
3. Features
4. Full WebIDL
Summary of Methods

Interface	Method
UserProfileInterface	void find(DOMString [] fields, UserProfileFindCB successCB, UserProfileErrorCB errorCB, UserProfileFindOptions options)
void createUserProfile(UserProfile userProfile, SuccessCB successCallBack, UserProfileErrorCB errorCallback)
void replaceUserProfile(DOMString id, UserProfile userProfile, SuccessCB successCallBack, UserProfileErrorCB errorCallback)
void deleteUserProfile(DOMString id, SuccessCB successCallBack, UserProfileErrorCB errorCallback)
UserProfile	
SocialNetworkProfile	
UserProfileFindOptions	
UserProfileError	
UserProfileErrorCB	void onerror(UserProfileError error)
UserProfileFindCB	void onsuccess(UserProfile [] userProfileObjs)
WebinosUserProfile	
1. Introduction

This API offers access to information of the user. UserProfile API is an extension of webinos Contact API to gather basic information about the user (e.g. name, nickname, gender, birthday, etc.) and extends it with social network attributes from Portablecontacts from August 5, 2008 (http://portablecontacts.net/draft-spec.html). These social network attributes are a simple pointer where the webinos user has non-webinos profiles. These information could be used by an application to query an external API for an additional information (e.g. query the Facebook Graph API for the buddylist).

2. Interfaces

2.1. UserProfileInterface

The UserProfileInterface interface provides methods to find, create, replace and delete a userprofile. There could be several userprofiles assigned to one sepcific webinos user.

        interface UserProfileInterface {
        
                caller void find(DOMString[] fields, UserProfileFindCB successCB, optional UserProfileErrorCB errorCB, optional UserProfileFindOptions options);
                        
                void createUserProfile(in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
                
                void replaceUserProfile(in DOMString id, in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
                
                void deleteUserProfile(in DOMString id, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
        };
Methods

find
find() method

Signature

caller void find(
              DOMString
            [] fields, UserProfileFindCB successCB, optional UserProfileErrorCB errorCB, optional UserProfileFindOptions options);
Find a userprofile in the webinos system according to the find user process detailed below.

This method takes two, three or four arguments. When called, it starts the following find userprofile process:

1. Let successCallback be the callback indicated by the method's second argument.

2. Let errorCallback be the callback indicated by the method's third argument, if any, or null otherwise.

3. If successCallback is null, then throw a TypeError (as defined in the WEBIDL Sepcification - http://dev.w3.org/2006/webapi/WebIDL/).

4. If there is a task from the device task source in one of the task queues (e.g. an existing find() operation is still pending a response), run these substeps:

4.1 If errorCallback is not null, let error be a UserProfileError object whose code attribute has the value PENDING_OPERATION_ERROR and queue a task to invoke errorCallback with error as its argument.

4.2 Abort this operation.

5. Return, and run the remaining steps asynchronously.

6. Let results be the array of UserPofile objects obtained by searching userprofiles in the webinos system according to the rules defined in UserProfile Search Processing, or null if the search has failed.

7. If results is null, run these substeps:

7.1 If errorCallback is not null, let error be a UserProfileError object whose code attribute has its value set according to the type of failure that occurred and queue a task to invoke errorCallback with error as its argument.

7.2 Abort this operation.

8. Queue a task to invoke successCallback with results as its argument.

Parameters

fields
Optional: No.
Nullable: No
Type: array
Description:
successCB
Optional: No.
Nullable: No
Type: UserProfileFindCB
Description:
errorCB
Optional: Yes.
Nullable: No
Type: UserProfileErrorCB
Description:
options
Optional: Yes.
Nullable: No
Type: UserProfileFindOptions
Description:
createUserProfile
createuserProfile() method - Creates a new user profile in the webinos system.

Signature

void createUserProfile(in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
Parameters

userProfile
Optional: No.
Nullable: No
Type: UserProfile
Description: A new UserProfile object.
successCallBack
Optional: Yes.
Nullable: No
Type: SuccessCB
Description: Callback issued when the creating of the user is correctly finished.
errorCallback
Optional: No.
Nullable: No
Type: UserProfileErrorCB
Description: Callback issued if an error occurs during the processing time.
Code example

 //create a new userProfile
 var userProfile = new Object();

 //add attributes
 userProfile.displayName = 'John Smith';
 userProfile.nickname = 'johnny2011';
 ...
 userProfile.timezone = 'CET';
 
 //creates a new userprofile in the webinos system
 webinos.userprofile.createuserProfile(userProfile, successCB, errorCB);

 
replaceUserProfile
The replaceUserProfile() method - Replaces a userprofile. This method should be used to update a userprofile.

Signature

void replaceUserProfile(in DOMString id, in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
Three steps are necessary to use this method.

1. Get the existing user profile object

2. Update attributes

3. Use replaceUserProfile() method to update the existing user profile with new attributes by providing the entire user profile object to the method.

Parameters

id
Optional: No.
Nullable: No
Type: DOMString
Description:
userProfile
Optional: No.
Nullable: No
Type: UserProfile
Description: The UserProfile object which should be replaced in the webinos system.
successCallBack
Optional: Yes.
Nullable: No
Type: SuccessCB
Description: Callback issued when the creating of the user is correctly finished.
errorCallback
Optional: No.
Nullable: No
Type: UserProfileErrorCB
Description: Callback issued if an error occurs during the opening. E.g. the userprofile id does not exist.
Code example

 // Obtain a single existing UserProfile object resulting from webinos.userprofile.find()
 var existingUserProfileObj = ...;

 // Modify some parameters as required. e.g. add a new phone number
 existingUserProfileObj.phoneNumbers.push({
 type: 'home', 
 value: '654321'
 });

 //update the userprofile
 webinos.userprofile.replaceUserProfile(existingUserProfileObj, successCB, errorCB);
 
deleteUserProfile
The deleteUserProfile() method - Deletes an existing userprofile from the user in the webinos system.

Signature

void deleteUserProfile(in DOMString id, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
Parameters

id
Optional: No.
Nullable: No
Type: DOMString
Description: The id of the existing object
successCallBack
Optional: Yes.
Nullable: No
Type: SuccessCB
Description: Callback issued when the creating of the user is correctly finished.
errorCallback
Optional: No.
Nullable: No
Type: UserProfileErrorCB
Description: Callback issued if an error occurs during the opening. E.g. the userprofile id does not exist.
Code example

 //delete the userprofile
 webinos.userprofile.deleteUserProfile('xxx', successCB, errorCB);
 
2.2. UserProfile

The UserProfile interface. It is a userprofile specific extension to the interface Contact in the Contacts module.

        interface UserProfile : Contact {
        
                attribute DOMString? preferredUsername;
                
                attribute SocialNetworkProfile[]? socialProfiles;
        };
Attributes

DOMString? preferredUsername
preferredUsername of type DOMString

The preferred username of this user on sites that ask for a username (e.g. jsmarr or daveman692). This field may be useful for describing the owner (i.e. the value when /@me/@self is requested), e.g. Consumers MAY wish to use this value to pre-populate a username for this user when signing up for a new service. See [[PORT] section 7.2.1].

SocialNetworkProfile [] socialProfiles
socialProfiles of type array of SocialNetworkProfile

The User profile on a social network provider.

2.3. SocialNetworkProfile

The SocialNetworkProfile interface

        [NoInterfaceObject]
        interface SocialNetworkProfile {
        
                attribute boolean pref;
                
                attribute DOMString? socialNetworkProvider;
                
                attribute DOMString? userId;
        };
Attributes

boolean pref
pref of type boolean

This attribute indicates whether this instance of the SocialNetworkProfile is the preferred, or primary, value for the user. By default, the value is false.

DOMString? socialNetworkProvider
socialNetworkProvider of type DOMString

The identifier of the social network provider, for the purposes of sorting and filtering.

DOMString? userId
userId of type DOMString

The user's IDs in the social network, that is one or more elements that can be used to uniquely identify the user (i.e. userName, social network ID number, email). Usually chosen automatically, and usually numeric but sometimes alphanumeric, e.g. "12345" or "1Z425A".

2.4. UserProfileFindOptions

The UserProfileFindOptions interface describes the options that can be applied to userprofile searching. It inherits directly from ContactFindOptions and could be used to declare an filter for userprofile attributes. When a UserProfileFindOptions parameter is provided to the UserProfile find() operation, it should be processed according to the provisions detailed in Options Processing.

    [NoInterfaceObject]
    interface UserProfileFindOptions : ContactFindOptions {

    };
2.5. UserProfileError

The UserProfileError interface. It is a userprofile specific extension to the interface ContactError in the Contacts module.

    [NoInterfaceObject]
        interface UserProfileError : ContactError {
                
        const unsigned short USERPROFILE_NOT_EXIST = 101;
    };
Constants

unsigned short USERPROFILE_NOT_EXIST
The userprofile does not exist in the webinos system.

2.6. UserProfileErrorCB

This is the wrapper interface for callbacks indicating failure of the createUserProfile(), updateUserProfile() and deleteUserProfile() operation.

    [Callback=FunctionOnly, NoInterfaceObject]
    interface UserProfileErrorCB  {  
        
        void onerror(UserProfileError error);
    };
Methods

onerror
Callback on failure of a find() operation

Signature

void onerror(UserProfileError error);
Parameters

error
Optional: No.
Nullable: No
Type: UserProfileError
Description: The UserProfileError object capturing the type of the error.
Return value

void
2.7. UserProfileFindCB

This is the wrapper interface for callbacks indicating success of the find() operation.

    [Callback=FunctionOnly, NoInterfaceObject]
    interface UserProfileFindCB {        
        void onsuccess (UserProfile[] userProfileObjs);
    };
Methods

onsuccess
Callback on success of a find() operation

Signature

void onsuccess(
              UserProfile
            [] userProfileObjs);
Parameters

userProfileObjs
Optional: No.
Nullable: No
Type: array
Description: An array of UserProfile objects resulting from the given UserProfile find() operation.
Return value

void
2.8. WebinosUserProfile

The WebinosUserProfile interface describes the part of the user profile API accessible through the webinos object.

        [NoInterfaceObject] interface WebinosUserProfile {
                readonly attribute UserProfileInterface userprofile;
        };
        webinoscore::Webinos implements WebinosUserProfile;
Attributes

readonly UserProfileInterface userprofile
webinos.userprofile object.

This attribute is readonly.
3. Features

This is the list of URIs used to declare this API's features, for use in the widget config.xml and as identifier for service type in service discovery functionality. For each URI, the list of functions covered is provided.

http://webinos.org/api/userprofile
4. Full WebIDL

module userprofile {
        
        interface UserProfileInterface {
        
                caller void find(DOMString[] fields, UserProfileFindCB successCB, optional UserProfileErrorCB errorCB, optional UserProfileFindOptions options);
                        
                void createUserProfile(in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
                
                void replaceUserProfile(in DOMString id, in UserProfile userProfile, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
                
                void deleteUserProfile(in DOMString id, optional SuccessCB successCallBack, in UserProfileErrorCB errorCallback);
        };
        
        interface UserProfile : Contact {
        
                attribute DOMString? preferredUsername;
                
                attribute SocialNetworkProfile[]? socialProfiles;
        };
        
        [NoInterfaceObject]
        interface SocialNetworkProfile {
        
                attribute boolean pref;
                
                attribute DOMString? socialNetworkProvider;
                
                attribute DOMString? userId;
        };
        
    [NoInterfaceObject]
    interface UserProfileFindOptions : ContactFindOptions {

    };
        
    [NoInterfaceObject]
        interface UserProfileError : ContactError {
                
        const unsigned short USERPROFILE_NOT_EXIST = 101;
    };
        
    [Callback=FunctionOnly, NoInterfaceObject]
    interface UserProfileErrorCB  {  
        
        void onerror(UserProfileError error);
    };
        
    [Callback=FunctionOnly, NoInterfaceObject]
    interface UserProfileFindCB {        
        void onsuccess (UserProfile[] userProfileObjs);
    };
        
        [NoInterfaceObject] interface WebinosUserProfile {
                readonly attribute UserProfileInterface userprofile;
        };

        webinoscore::Webinos implements WebinosUserProfile;
};