Abstract

Interface for Payment functions.

Table of Contents

1. Introduction
2. Interfaces
2.1. WebinosPayment
2.2. Payment
2.3. ShoppingBasket
2.4. ShoppingItem
2.5. SuccessShoppingBasketCallback
2.6. PaymentSuccessCB
2.7. PaymentErrorCB
2.8. PendingOperation
2.9. PaymentError
3. Exceptions
3.1. PaymentException
4. Features
5. Full WebIDL
Summary of Methods

Interface	Method
WebinosPayment	
Payment	PendingOperation createShoppingBasket(SuccessShoppingBasketCallback successCallback, PaymentErrorCB errorCallback, DOMString serviceProviderID, DOMString customerID, DOMString shopID)
ShoppingBasket	PendingOperation addItem(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback, ShoppingItem item)
PendingOperation update(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback)
PendingOperation checkout(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback)
void release()
ShoppingItem	
SuccessShoppingBasketCallback	void onSuccess(ShoppingBasket basket)
PaymentSuccessCB	void onSuccess()
PaymentErrorCB	void onError(PaymentError error)
PendingOperation	void cancel()
PaymentError	
1. Introduction

This API provides generic shopping basket functionality to provide in-app payment.

It is not linked to a specific payment service provider and is designed to be sufficiently generic to be mapable to various payment services like GSMA OneAPI, Andoid Payment API or PayPal.

2. Interfaces

2.1. WebinosPayment

The WebinosPayment interface describes the part of the payment API accessible through the webinos object.

   [NoInterfaceObject] interface WebinosPayment {


      readonly attribute Payment payment;
   };
     webinoscore::Webinos implements WebinosPayment;
Attributes

readonly Payment payment
webinos.payment object.

This attribute is readonly.
2.2. Payment

The Payment interface

[NoInterfaceObject] interface Payment { 

        PendingOperation createShoppingBasket(in SuccessShoppingBasketCallback successCallback, in PaymentErrorCB errorCallback,
        in DOMString serviceProviderID, in DOMString customerID, in DOMString shopID)
        raises(PaymentException);
  };
The Payment interface provides access to payment functionality.

The API supports creation of a shopping basket, adding items to the shopping basket, proceeding to checkout and releasing the shopping basket.

This essentially echoes the usual 'shopping basket' system used on many web sites.

The code example below refunds the user for a returned CD and charges for the deluxe edition of that CD, demonstarting charging and refunding payments.

Code example

    
        webinons.payment.createShoppingBasket(openBasketSuccess, paymentFailure, "PayPal", "mymail@provider.com", "ShopName12345");
        var myBasket = null;

        // Define the openBasketSuccess success callback.
        function openBasketSuccess(basket) {
                alert("Shopping basket was opened successfully");
                myBasket = basket;  
                // refound for a CD
                myBasket.addItem(CD2346278, paymentFailure,
                    {  productID: 'DCD2346233', 
                       description: 'Best of Ladytron 00-10 by Ladytron (Audio CD - 2011)', 
                       currency: 'EUR',
                       itemPrice: -14.99,
                       itemCount: 1}
        }

        // Define the refundItemSuccess success callback.
        function refundSuccess() {
                alert("Adding of refunding item was handled successfully");
                // charge for the deluxe CD
                myBasket.addItem(addItemSuccess, paymentFailure,
                    {  productID: 'DCD2346233', 
                       description: 'Best of Ladytron 00-10 (Deluxe Edition) by Ladytron (Audio CD - 2011)', 
                       currency: 'EUR',
                       itemPrice: 17.98,
                       itemCount: 1}
        }

        // Define the addItemSuccess success callback.
        function addItemSuccess() {
                alert("Adding of new item was handled successfully");
                // now close the bill and perform the actual payment
                myBasket.update(updateSuccess, paymentFailure);
        }
        
        // Define the updateSuccess success callback.
        function updateSuccess() {
                alert("Total amount is: "myBasket.totalAmount+" Tax is "+myBasket.tax);
                // now close the bill and perform the actual payment
                myBasket.checkout(checkoutSuccess, paymentFailure);
        }
        
        // Define the checkoutSuccess success callback.
        function checkoutSuccess() {
                alert("Checkout handled successfully - payment was performed.");
                 if (myBasket != null) myBasket.release();
        }        

        // Define the paymentFailure failure callback.
        function paymentFailure(e) {   
                alert("Failure occured during payment.");
                 if (myBasket != null) myBasket.release();
        }

 
Methods

createShoppingBasket
Creates a shopping basket

Signature

PendingOperation createShoppingBasket(in SuccessShoppingBasketCallback successCallback, in PaymentErrorCB errorCallback, in DOMString serviceProviderID, in DOMString customerID, in DOMString shopID);
Parameters

successCallback
Optional: No.
Nullable: No
Type: SuccessShoppingBasketCallback
Description: Callback issued when the shopping basket is created
errorCallback
Optional: No.
Nullable: No
Type: PaymentErrorCB
Description: Callback issued if an error occurs during the creation of the shopping basket
serviceProviderID
Optional: No.
Nullable: No
Type: DOMString
Description: is the name of the payment provider to be used
customerID
Optional: No.
Nullable: No
Type: DOMString
Description: is identification of the person making the payment as known to the payment provider
shopID
Optional: No.
Nullable: No
Type: DOMString
Description: is the identification of the shop the payment is made to
Return value

PendingOperation enabling the requester to cancel this request.
Exceptions

PaymentException:
INVALID_ARGUMENT_ERROR if an invalid argument is passed

2.3. ShoppingBasket

The ShoppingBasket interface provides access to a shopping basket

[NoInterfaceObject] interface ShoppingBasket {   


        readonly attribute ShoppingItem[] items; 

        readonly attribute ShoppingItem[] extras; 

        readonly attribute float totalBill; 
        

        PendingOperation addItem(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback, in ShoppingItem item)
        raises(PaymentException);


        PendingOperation update(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback)
        raises(PaymentException);


        PendingOperation checkout(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback)
        raises(PaymentException);


        void release();
  };
The shopping basket represents a current payment action and allows to add a number of items to the basket before proceeding to checkout.

Attributes

readonly ShoppingItem [] items
List of items currently in the shopping basket.

These are the items that have been added with addItem.

No exceptions

This attribute is readonly.
readonly ShoppingItem [] extras
Automatically generated extra items, typically rebates, taxes and shipping costs.

These items are automatically added to the shopping basket by update() (or after the addition of an item to the basket).

These items can contain such 'virtual' items as payback schemes, rebates, taxes, shipping costs and other items that are calculated on the basis of the regular items added.

No exceptions

This attribute is readonly.
readonly float totalBill
The total amount that will be charged to the user on checkout.

Will be updated by update(), may be updated by addItem().

No exceptions

This attribute is readonly.
Methods

addItem
Adds an item to a shopping basket.

Signature

PendingOperation addItem(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback, in ShoppingItem item);
Parameters

successCallback
Optional: No.
Nullable: No
Type: PaymentSuccessCB
Description: Callback issued when the adding of the item to the shopping basket is correctly finished.
errorCallback
Optional: No.
Nullable: No
Type: PaymentErrorCB
Description: Callback issued if an error occurs during adding the amount
item
Optional: No.
Nullable: No
Type: ShoppingItem
Description: the item to purchase
Return value

PendingOperation enabling the requester to cancel this request.
Exceptions

PaymentException:
INVALID_ARGUMENT_ERROR if an invalid argument is passed

update
Updates the shopping basket

Signature

PendingOperation update(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback);
The update function updates the values in the shopping baskets, based on the added items. Such updates may include taxes, calculating the total amount, shipping costs or rebate calculations.

While this, preferably, is internally updated after the adding of each item, such an update might require communication with the payment service provider and it might be undesireable in specific implementations to perform such a query after each individual item, so a specifc update function is provided to force such an update.

The checkout function will always perform an update internally before payment.

Parameters

successCallback
Optional: No.
Nullable: No
Type: PaymentSuccessCB
Description: Callback issued when the update is performed
errorCallback
Optional: No.
Nullable: No
Type: PaymentErrorCB
Description: Callback issued if an error occurs during update
Return value

PendingOperation enabling the requester to cancel this request.
Exceptions

PaymentException:
INVALID_ARGUMENT_ERROR if an invalid argument is passed

checkout
Performs the checkout of the shopping basket.

Signature

PendingOperation checkout(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback);
The items in the shopping basket will be charged to the shopper.

Depending on the implementation of the actual payment service, this function might cause the checkout screen of the payment service provider to be displayed.

Parameters

successCallback
Optional: No.
Nullable: No
Type: PaymentSuccessCB
Description: Callback issued when the checkout is performed and payment is made
errorCallback
Optional: No.
Nullable: No
Type: PaymentErrorCB
Description: Callback issued if an error occurs during adding the amount
Return value

PendingOperation enabling the requester to cancel this request.
Exceptions

PaymentException:
INVALID_ARGUMENT_ERROR if an invalid argument is passed

release
Releases a shopping basket.

Signature

void release();
The current shopping basket will be released.

If no checkout has been performed, the initiated shopping transaction will be cancelled.

Return value

void
2.4. ShoppingItem

The ShoppingItem captures the attributes of a single shopping product

   [NoInterfaceObject] interface ShoppingItem {

         attribute DOMString productID;

         attribute DOMString description;

         attribute DOMString currency;

         attribute float itemPrice;

         attribute unsigned long itemCount;

         readonly attribute unsigned long itemsPrice;
    };
The shopping basket represents a current payment action and allows to add a number of items to the basket before proceeding to checkout.

Attributes

DOMString productID
An id that allows the shop to identify the purchased item

No exceptions

DOMString description
A human-readable text to appear on the bill, so the user can easily see what they bought.

No exceptions

DOMString currency
The 3-figure code as per ISO 4217.

No exceptions

float itemPrice
The price per individual item in the currency given above, a negative number represents a refund.

No exceptions

unsigned long itemCount
The number of identical items purchased

No exceptions

readonly unsigned long itemsPrice
Price for all products in this shopping item.

Typically this is itemPrice*itemCount, but special '3 for 2' rebates might apply.

Updated by the shopping basket update function.

No exceptions

This attribute is readonly.
2.5. SuccessShoppingBasketCallback

Callback for successful creation of a shopping basket

        [Callback=FunctionOnly, NoInterfaceObject]
        interface SuccessShoppingBasketCallback {

            void onSuccess  (ShoppingBasket basket);
        };
Methods

onSuccess
Callback for successful creation of a shopping basket

Signature

void onSuccess(ShoppingBasket basket);
Parameters

basket
Optional: No.
Nullable: No
Type: ShoppingBasket
Description: The shopping basket to which items can be added.
Return value

void
2.6. PaymentSuccessCB

Callback for successful payment related functions

        [Callback=FunctionOnly, NoInterfaceObject]
        interface PaymentSuccessCB {

            void onSuccess  ();
        };
Methods

onSuccess
Callback for successful of payment related functions

Signature

void onSuccess();
Return value

void
2.7. PaymentErrorCB

Callback for errors during payment related functions

        [Callback=FunctionOnly, NoInterfaceObject]
        interface PaymentErrorCB {

            void onError (in PaymentError error);
        };
Methods

onError
Callback for errors during payment related functions

Signature

void onError(in PaymentError error);
Parameters

error
Optional: No.
Nullable: No
Type: PaymentError
Description: The Payment API related error object of an unsuccessful asynchronous operation.
Return value

void
2.8. PendingOperation

The PendingOperation interface

     [NoInterfaceObject] interface PendingOperation {

        void cancel ();
     };
The PendingOperation interface describes objects that are returned by asynchronous methods that are cancellable. It makes it possible to bring these operations to a stop if they haven't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
Methods

cancel
Method Cancel

Signature

void cancel();
Cancel the pending asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return. No success or error callback for the pending operation will be invoked.

2.9. PaymentError

Payment specific errors.

        interface PaymentError {


                

                const unsigned short PAYMENT_SHOPPING_BASKET_OPEN_ERROR = 1;


                const unsigned short PAYMENT_SHOPPING_BASKET_NOT_OPEN_ERROR = 2;


                const unsigned short PAYMENT_CHARGE_FAILED = 3;                


                const unsigned short PAYMENT_REFUND_NOT_SUPPORTED = 4;


                const unsigned short PAYMENT_REFUND_FAILED = 5;                


                const unsigned short PAYMENT_CHARGEABLE_EXCEEDED = 6;


                const unsigned short PAYMENT_AUTHENTICATION_FAILED = 7;


        readonly attribute unsigned short code;

             readonly attribute DOMString message;
  };
The PaymentError interface encapsulates all errors in the manipulation of payments objects in the Payment API.

Constants

unsigned short PAYMENT_SHOPPING_BASKET_OPEN_ERROR
Bill is already open

unsigned short PAYMENT_SHOPPING_BASKET_NOT_OPEN_ERROR
Bill is not open

unsigned short PAYMENT_CHARGE_FAILED
Charging operation failed, the charge was not applied

unsigned short PAYMENT_REFUND_NOT_SUPPORTED
Refunds not supported

unsigned short PAYMENT_REFUND_FAILED
Refund failed

unsigned short PAYMENT_CHARGEABLE_EXCEEDED
Chargeable amount exceeded

unsigned short PAYMENT_AUTHENTICATION_FAILED
Chargeable Authentication failed. Payment credentials are incorrect.

Attributes

readonly unsigned short code
An error code assigned by an implementation when an error has occurred in Payment processing.

No exceptions.

This attribute is readonly.
readonly DOMString message
A text describing an error occuring in the Payment in human readable form.

No exceptions.

This attribute is readonly.
3. Exceptions

3.1. PaymentException

Payment API specific errors.

         exception PaymentException {


                const unsigned short INVALID_ARGUMENT_ERROR = 1;


        unsigned short code;


        DOMString message;

    
  };
The PaymentException interface encapsulates all errors in calling of the Payment API.

Field

unsigned short code
An error code assigned by an implementation when an error has occurred in Payment API processing.

DOMString message
A text describing an error occuring in the Payment API in human readable form.

4. Features

This is the list of URIs used to declare this API's features, for use in the widget config.xml and as identifier for service type in service discovery functionality. For each URI, the list of functions covered is provided.

http://webinos.org/api/payment
Identifies all payment interactions.

5. Full WebIDL

module payment {      




   [NoInterfaceObject] interface WebinosPayment {


      readonly attribute Payment payment;
   };





 
[NoInterfaceObject] interface Payment { 

        PendingOperation createShoppingBasket(in SuccessShoppingBasketCallback successCallback, in PaymentErrorCB errorCallback,
        in DOMString serviceProviderID, in DOMString customerID, in DOMString shopID)
        raises(PaymentException);
  };
  

   
[NoInterfaceObject] interface ShoppingBasket {   


        readonly attribute ShoppingItem[] items; 

        readonly attribute ShoppingItem[] extras; 

        readonly attribute float totalBill; 
        

        PendingOperation addItem(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback, in ShoppingItem item)
        raises(PaymentException);


        PendingOperation update(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback)
        raises(PaymentException);


        PendingOperation checkout(in PaymentSuccessCB successCallback, in PaymentErrorCB errorCallback)
        raises(PaymentException);


        void release();
  };


   [NoInterfaceObject] interface ShoppingItem {

         attribute DOMString productID;

         attribute DOMString description;

         attribute DOMString currency;

         attribute float itemPrice;

         attribute unsigned long itemCount;

         readonly attribute unsigned long itemsPrice;
    };  


        [Callback=FunctionOnly, NoInterfaceObject]
        interface SuccessShoppingBasketCallback {

            void onSuccess  (ShoppingBasket basket);
        };
        

        [Callback=FunctionOnly, NoInterfaceObject]
        interface PaymentSuccessCB {

            void onSuccess  ();
        };
                

        [Callback=FunctionOnly, NoInterfaceObject]
        interface PaymentErrorCB {

            void onError (in PaymentError error);
        };


     [NoInterfaceObject] interface PendingOperation {

        void cancel ();
     };


        

        interface PaymentError {


                

                const unsigned short PAYMENT_SHOPPING_BASKET_OPEN_ERROR = 1;


                const unsigned short PAYMENT_SHOPPING_BASKET_NOT_OPEN_ERROR = 2;


                const unsigned short PAYMENT_CHARGE_FAILED = 3;                


                const unsigned short PAYMENT_REFUND_NOT_SUPPORTED = 4;


                const unsigned short PAYMENT_REFUND_FAILED = 5;                


                const unsigned short PAYMENT_CHARGEABLE_EXCEEDED = 6;


                const unsigned short PAYMENT_AUTHENTICATION_FAILED = 7;


        readonly attribute unsigned short code;

             readonly attribute DOMString message;
  };  




         exception PaymentException {


                const unsigned short INVALID_ARGUMENT_ERROR = 1;


        unsigned short code;


        DOMString message;

    
  };  


     webinoscore::Webinos implements WebinosPayment;

};