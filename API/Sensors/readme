Abstract

The Generic Sensor API

Table of Contents

1. Introduction
2. Interfaces
2.1. Sensor
2.2. ConfigureSensorCB
2.3. SensorErrorCB
2.4. SensorCBError
2.5. ConfigureSensorOptions
2.6. PendingOp
2.7. SensorEvent
3. Exceptions
3.1. SensorException
4. Features
5. Full WebIDL
Summary of Methods

Interface	Method
Sensor	PendingOp configureSensor(ConfigureSensorOptions options, ConfigureSensorCB successCB, SensorErrorCB errorCB)
ConfigureSensorCB	void onSuccess()
SensorErrorCB	void onErrror(SensorCBError error)
SensorCBError	
ConfigureSensorOptions	
PendingOp	void cancel()
SensorEvent	void initSensorEvent(DOMString type, boolean bubbles, boolean cancelable, DOMString sensorType, DOMString sensorId, unsigned short accuracy, unsigned short rate, boolean interrupt, float [] sensorValues)
1. Introduction

The Webinos Generic Sensor API provides web applications with an API to access data from sensors in the device, connected to the device or in another device.

The API is agnostic to underlying low level methods for sensor discovery and communication with sensors. However, the sensor API should be used in combination with the general Webinos service discovery methods findServices() and bind(). The sensors services can be located in the user's personal zone or be shared on the current network.

The API consists of two interfaces: 
- A sensor interface that provides attributes for the sensors and a method to configure a selected sensor.
- A DOM level 3 event that provides sensor data.
Currently 5 different sensor types are defined but the API could easily be extended with additional sensor types.

This is an experimental API and security and privacy issues are not specifically addressed in the specification. If access to security or privacy sensitive sensors are provided the user agent must either acquire access permission through a user interface or control access through a prearranged trust relationship with users.

2. Interfaces

2.1. Sensor

This interface defines sensor properties. It is a sensor specific extension to the interface Service in the ServiceDiscovery module. The added attributes correspond to Android sensor API attributes.

    [NoInterfaceObject] interface Sensor : Service {
 

        readonly attribute float?          maximumRange;


        readonly attribute unsigned long?   minDelay;


        readonly attribute float?         power;


        readonly attribute float?         resolution;


        readonly attribute DOMString?      vendor;  


        readonly attribute unsigned long?  version; 



        PendingOp configureSensor (in ConfigureSensorOptions options, in ConfigureSensorCB successCB, in optional SensorErrorCB errorCB)
            raises (SensorException);


     };
Code example

        // Handle that can be used to cancel the ongoing asynchronous discovery process.
        var findHandle = 0;

        // Handle from service.bind.
        var sensorHandle = 0;

        // Array of found temperature sensors object.
        var availableTempSensors = {};
                 
        // Callback method that display a list of found sensors in a selection list
        // The selection list is dynamically extended every time a new sensor is discovered.
        function sensorFoundCB(sensor) {

                var selectlist = document.getElementById('sensorlist');
                var option = document.createElement('option');
                option.value = sensor.id;
                option.appendChild(document.createTextNode(sensor.displayName));
                availableTempSensors [sensor.id] = sensor;
                selectlist.appendChild(option);

        }
                      
 
       // Callback when bind has been successfully executed on the service object. The Sensor is authorized and ready to use
        function bindCB(mySensor) {

                alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id + ' selected');
               

                // Configure the sensor.
                mySensor.configureSensor ( {timeout: 120, rate: SENSOR_DELAY_NORMAL, interrupt: False}, 
                                           successHandler () {alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id +
                                                                    ' is configured') },
                                           errorHandler (error) {alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id +
                                                                       ' configuration failed' + ' with error: ' + error.message)} );

               
                // Start listening to sensor events and log values. 
                mySensor.addEventListener('sensor', function (event) {
                          console.log(event.sensorValues[0]);

                          var temp = document.getElementById('temp');
                          temp.innerHTML = "Current temperature is: " + event.sensorValues[0];


                }, true); 

        }


       // Callback method that is invoked when user selects an option in the sensor selection list 
        function sensorSelected(sensor) {

                // Stops the findServices operation
                findHandle.cancel();

                // Binds to the sensor API to initiate an authorized objects used to
                // invoke services.  
                sensorHandle = sensor.bind({onBind:bindCB});                               
                
        }
        
        // Get list of temperature sensors registered in the device through the Service Discovery findServices() method
        findHandle  = window.webinos.discovery.findServices({api:'http://webinos.org/api/sensors.temperature'}, {onFound:sensorFoundCB});
 
       // Handle user selection of sensor
        var sensorlist = document.getElementById('sensorlist');
        sensorlist.addEventListener("change", function (e) {
                                var sensor = availableTempSensors[e.target.value];
                                if (sensor) {
                                    sensorSelected(sensor);
                                }
        }, false);


 
Attributes

readonly float? maximumRange
Max range of sensor in the sensors unit.

This attribute is readonly.
readonly unsigned long? minDelay
Min delay of sensor allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.

This attribute is readonly.
readonly float? power
Power consumption of sensor in mA used by this sensor while in use.

This attribute is readonly.
readonly float? resolution
Resolution of the sensor in the sensors unit.

This attribute is readonly.
readonly DOMString? vendor
Vendor string of this sensor.

This attribute is readonly.
readonly unsigned long? version
Version of the sensors module.

This attribute is readonly.
Methods

configureSensor
Configures a sensor.

Signature

PendingOp configureSensor(in ConfigureSensorOptions options, in ConfigureSensorCB successCB, in optional SensorErrorCB errorCB);
Question: Do we need the ability to specify high and low thresholds? This is for example not supported by Android sensor API.

Parameters

options
Optional: No.
Nullable: No
Type: ConfigureSensorOptions
Description: Sensor configuration options.
successCB
Optional: No.
Nullable: No
Type: ConfigureSensorCB
Description: Callback issued when sensor configuration succeeded.
errorCB
Optional: Yes.
Nullable: No
Type: SensorErrorCB
Description: Callback issued if sensor configuration fails.
Return value

A pending operation object making it possible to cancel the configureSensor operation
Exceptions

SensorException:
with appropriate error code.

2.2. ConfigureSensorCB

ConfigureSensorCB interface definition

    [Callback=FunctionOnly, NoInterfaceObject] interface ConfigureSensorCB {


       void onSuccess();          
    };
Methods

onSuccess
onSuccess The onSuccess method is called when configuration of a sensor succeeded.

Signature

void onSuccess();
2.3. SensorErrorCB

SensorErrorCB interface definition

    [Callback=FunctionOnly, NoInterfaceObject] interface SensorErrorCB {


       void onErrror(in SensorCBError error); 
    };
Methods

onErrror
onError The onError method is called if an error occurs during the configureSensor() process.

Signature

void onErrror(in SensorCBError error);
Parameters

error
Optional: No.
Nullable: No
Type: SensorCBError
Description: The error object of an unsuccessful configureSensor() asynchronous operation.
2.4. SensorCBError

SensorCBError interface definition

    [NoInterfaceObject] interface SensorCBError {


       const unsigned short UNKNOWN_ERROR = 0;


       const unsigned short TIMEOUT_ERROR = 1;


       const unsigned short ILLEGAL_SENSOR_TYPE_ERROR = 2;


       const unsigned short SENSOR_TYPE_NOT_SUPPORTED_ERROR = 3;


       const unsigned short ILLEGAL_SENSOR_ID_ERROR = 4;


       const unsigned short OTHER_ILLEGAL_INPUT_ARGUMENT_ERROR = 5;


       const unsigned short REQUESTED_RATE_NOT_SUPPORTED_ERROR = 6;


       const unsigned short REQUESTED_INTERRUPTMODE_NOT_SUPPORTED_ERROR = 7;


       const unsigned short PERMISSION_DENIED_ERROR = 50;



       readonly attribute unsigned short code;



       readonly attribute DOMString message;

    };
Constants

unsigned short UNKNOWN_ERROR
Uknown error

unsigned short TIMEOUT_ERROR
No success callback within timeout period.

unsigned short ILLEGAL_SENSOR_TYPE_ERROR
Illegal sensor type

unsigned short SENSOR_TYPE_NOT_SUPPORTED_ERROR
Illegal sensor type

unsigned short ILLEGAL_SENSOR_ID_ERROR
Illegal sensor id

unsigned short OTHER_ILLEGAL_INPUT_ARGUMENT_ERROR
Other illegal input arguments

unsigned short REQUESTED_RATE_NOT_SUPPORTED_ERROR
Sensor rate requested through configureSensor() not supported

unsigned short REQUESTED_INTERRUPTMODE_NOT_SUPPORTED_ERROR
Interrupt mode requested through configureSensor() not supported

unsigned short PERMISSION_DENIED_ERROR
Permission denied

Attributes

readonly unsigned short code
Error code assigned when an error has occurred in configureSensor() processing.

This attribute is readonly.
readonly DOMString message
Human readable message assigned when an error has occurred in configureSensor() processing.

This attribute is readonly.
2.5. ConfigureSensorOptions

ConfigureSensorOptions interface definition

    [NoInterfaceObject] interface ConfigureSensorOptions {


       const unsigned short INFINITE = 0;


       const unsigned short SENSOR_DELAY_FASTEST = 0;


       const unsigned short SENSOR_DELAY_GAME = 1;


       const unsigned short SENSOR_DELAY_UI = 2;


       const unsigned short SENSOR_DELAY_NORMAL = 3;


       attribute unsigned short timeout;


       attribute unsigned short rate;


       attribute boolean interrupt;
     };
Constants

unsigned short INFINITE
INFINITE Timeout Value

unsigned short SENSOR_DELAY_FASTEST
The sensor is reporting data as fast as possible (rate attribute).

unsigned short SENSOR_DELAY_GAME
The sensor is reporting data with a rate suitable for games (rate attribute).

unsigned short SENSOR_DELAY_UI
The sensor is reporting data with a rate suitable for user interface (rate attribute).

unsigned short SENSOR_DELAY_NORMAL
The sensor is reporting data with a normal rate, e.g. suitable for screen orientation changes (rate attribute).

Attributes

unsigned short timeout
A timeout value for when configureSensor() is canceled in seconds between 0-65535. Default value is 120 seconds.

unsigned short rate
The requested rate of the sensor data.

boolean interrupt
The requested Interrupt mode of the sensor.
False = INTERRUPT_DISABLED (events fired with a fixed time interval) 
True = INTERRUPT_ENABLED (events fired when value changes)

2.6. PendingOp

The PendingOp interface

     [NoInterfaceObject] interface PendingOp {


        void cancel ();
     };
The PendingOp interface describes objects that are returned by asynchronous methods that are cancellable. It makes it possible to bring these operations to a stop if they haven't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
TBD: Elaborate on cancel of ongoing configureSensor() operation...

Methods

cancel
Method Cancel

Signature

void cancel();
Cancel the pending asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return. No success or error callback for the pending operation will be invoked.

2.7. SensorEvent

This interface defines the "genericsensor" event type.

   interface SensorEvent : Event {

 

    const unsigned short SENSOR_STATUS_ACCURACY_HIGH = 4;


    const unsigned short SENSOR_STATUS_ACCURACY_MEDIUM = 3;


    const unsigned short SENSOR_STATUS_ACCURACY_LOW = 2;


    const unsigned short SENSOR_STATUS_UNRELIABLE = 1;


    const unsigned short SENSOR_STATUS_UNAVAILABLE = 0;



    readonly attribute DOMString sensorType;


    readonly attribute DOMString sensorId;



    readonly attribute unsigned short accuracy;

 

    readonly attribute unsigned short rate;


    readonly attribute boolean interrupt;


    readonly attribute float[] sensorValues;


    void initSensorEvent(in DOMString type,
                         in boolean bubbles,
                         in boolean cancelable,
                         in DOMString sensorType,
                         in DOMString sensorId,
                         in unsigned short accuracy,
                         in unsigned short rate,
                         in boolean interrupt, 
                         in float[] sensorValues); 
    };
Registration for generic sensor events is achieved by calling addEventListener instantiated on the selected sensor object with event type set to "sensor" (see code example in the beginning of this specification)

Constants

unsigned short SENSOR_STATUS_ACCURACY_HIGH
A constant describing that the sensor is reporting data with maximum accuracy.

unsigned short SENSOR_STATUS_ACCURACY_MEDIUM
A constant describing that the sensor is reporting data with an average level of accuracy, calibrating with the environment may improve the reading.

unsigned short SENSOR_STATUS_ACCURACY_LOW
A constant describing that the sensor is reporting with low accuracy, calibrating with the environment is needed.

unsigned short SENSOR_STATUS_UNRELIABLE
A constant describing that the sensor data cannot be trusted, calibrating is needed or the environment does not allow reading.

unsigned short SENSOR_STATUS_UNAVAILABLE
A constant describing that the sensor is not available and no sensor data can be provided. This accuracy attribute will for example take this value when contact is lost with a sensor using Bluetooth communication.

Attributes

readonly DOMString sensorType
The type of sensor. This is a URI defining the sensor type according to the defined sensor "feature" URI strings. See section "Features". 

For the defined sensor types the sensorValues array contains the following data:

http://webinos.org/api/sensors.light:
sensorValue[0] = the measured ambient light level around the device in SI lux units.
sensorValue[1] = A normalized value between 0 and 1.

http://webinos.org/api/sensors.noise:
sensorValue[0] = the measured ambient noise around the device, in DB(SPL).
sensorValue[1] = A normalized value between 0 and 1.

http://webinos.org/api/sensors.temperature:
sensorValue[0] = the measured ambient temperature around the device, in degrees Celsius.
sensorValue[1] = A normalized value between 0 and 1.

http://webinos.org/api/sensors.pressure:
sensorValue[0] = the measured atmospheric pressure around the device in hPa (millibar)
sensorValue[1] = A normalized value between 0 and 1.

http://webinos.org/api/sensors.proximity:
sensorValue[0] = Proximity sensor distance measured in centimeters.
sensorValue[1] = A normalized value between 0 and 1.Some sensor can only state "near" (0) and "far" (1) 
This attribute is readonly.
readonly DOMString sensorId
The unique identity of the of the specific sensor

This attribute is readonly.
readonly unsigned short accuracy
The accuracy of the sensor

This attribute is readonly.
readonly unsigned short rate
The rate of the sensor data

This attribute is readonly.
readonly boolean interrupt
Interrupt mode of the sensor. The value is one of false = INTERRUPT_DISABLED (events fired with a fixed time interval) true = INTERRUPT_ENABLED (events fired when value changes)

This attribute is readonly.
readonly float [] sensorValues
Array of sensor values

This attribute is readonly.
Methods

initSensorEvent
Method to set initial values of sensor event.

Signature

void initSensorEvent(in DOMString type, in boolean bubbles, in boolean cancelable, in DOMString sensorType, in DOMString sensorId, in unsigned short accuracy, in unsigned short rate, in boolean interrupt, in 
              float
            [] sensorValues);
The initSensorEvent() method must initialize the event in a manner analogous to the initEvent() method in http://www.w3.org/TR/2010/WD-DOM-Level-3-Events-20100907/. The method can for example be used with document.createEvent() and EventTarget.dispatchEvent() to simulate a specific event. The sensorType, sensorId, accuracy, rate, interrupt and sensorvalues arguments must initialize the attributes with the same names.

Parameters

type
Optional: No.
Nullable: No
Type: DOMString
Description: Event type i.e. 'sensor'
bubbles
Optional: No.
Nullable: No
Type: boolean
Description: True if event bubbles
cancelable
Optional: No.
Nullable: No
Type: boolean
Description: True if event cancelable
sensorType
Optional: No.
Nullable: No
Type: DOMString
Description: Sensor type as a URI
sensorId
Optional: No.
Nullable: No
Type: DOMString
Description: The unique identity of the specific sensor
accuracy
Optional: No.
Nullable: No
Type: unsigned short
Description: Accuracy of sensor data
rate
Optional: No.
Nullable: No
Type: unsigned short
Description: Rate
interrupt
Optional: No.
Nullable: No
Type: boolean
Description: Interrupt mode
sensorValues
Optional: No.
Nullable: No
Type: array
Description: Array of sensor values
3. Exceptions

3.1. SensorException

Defines the error codes for this module

   exception SensorException {


       const unsigned short INVALID_INPUT_ARGUMENT = 0; 


       unsigned short code;



       DOMString message;

   };
Field

unsigned short code
Exception code

DOMString message
Exception message

4. Features

This is the list of URIs used to declare this API's features, for use in the widget config.xml and as identifier for service type in service discovery functionality. For each URI, the list of functions covered is provided.

http://webinos.org/api/sensors
Identifies all the sensor types.

http://webinos.org/api/sensors.light
Identifies the light sensor type.

http://webinos.org/api/sensors.noise
Identifies the noise sensor type.

http://webinos.org/api/sensors.temperature
Identifies the temperature sensor type.

http://webinos.org/api/sensors.pressure
Identifies the pressure sensor type.

5. Full WebIDL

module sensors {



   exception SensorException {


       const unsigned short INVALID_INPUT_ARGUMENT = 0; 


       unsigned short code;



       DOMString message;

   };

  




 
    [NoInterfaceObject] interface Sensor : Service {
 

        readonly attribute float?          maximumRange;


        readonly attribute unsigned long?   minDelay;


        readonly attribute float?         power;


        readonly attribute float?         resolution;


        readonly attribute DOMString?      vendor;  


        readonly attribute unsigned long?  version; 



        PendingOp configureSensor (in ConfigureSensorOptions options, in ConfigureSensorCB successCB, in optional SensorErrorCB errorCB)
            raises (SensorException);


     };



    [Callback=FunctionOnly, NoInterfaceObject] interface ConfigureSensorCB {


       void onSuccess();          
    };



    [Callback=FunctionOnly, NoInterfaceObject] interface SensorErrorCB {


       void onErrror(in SensorCBError error); 
    };


    [NoInterfaceObject] interface SensorCBError {


       const unsigned short UNKNOWN_ERROR = 0;


       const unsigned short TIMEOUT_ERROR = 1;


       const unsigned short ILLEGAL_SENSOR_TYPE_ERROR = 2;


       const unsigned short SENSOR_TYPE_NOT_SUPPORTED_ERROR = 3;


       const unsigned short ILLEGAL_SENSOR_ID_ERROR = 4;


       const unsigned short OTHER_ILLEGAL_INPUT_ARGUMENT_ERROR = 5;


       const unsigned short REQUESTED_RATE_NOT_SUPPORTED_ERROR = 6;


       const unsigned short REQUESTED_INTERRUPTMODE_NOT_SUPPORTED_ERROR = 7;


       const unsigned short PERMISSION_DENIED_ERROR = 50;



       readonly attribute unsigned short code;



       readonly attribute DOMString message;

    };    



    [NoInterfaceObject] interface ConfigureSensorOptions {


       const unsigned short INFINITE = 0;


       const unsigned short SENSOR_DELAY_FASTEST = 0;


       const unsigned short SENSOR_DELAY_GAME = 1;


       const unsigned short SENSOR_DELAY_UI = 2;


       const unsigned short SENSOR_DELAY_NORMAL = 3;


       attribute unsigned short timeout;


       attribute unsigned short rate;


       attribute boolean interrupt;
     };


     [NoInterfaceObject] interface PendingOp {


        void cancel ();
     };




   interface SensorEvent : Event {

 

    const unsigned short SENSOR_STATUS_ACCURACY_HIGH = 4;


    const unsigned short SENSOR_STATUS_ACCURACY_MEDIUM = 3;


    const unsigned short SENSOR_STATUS_ACCURACY_LOW = 2;


    const unsigned short SENSOR_STATUS_UNRELIABLE = 1;


    const unsigned short SENSOR_STATUS_UNAVAILABLE = 0;



    readonly attribute DOMString sensorType;


    readonly attribute DOMString sensorId;



    readonly attribute unsigned short accuracy;

 

    readonly attribute unsigned short rate;


    readonly attribute boolean interrupt;


    readonly attribute float[] sensorValues;


    void initSensorEvent(in DOMString type,
                         in boolean bubbles,
                         in boolean cancelable,
                         in DOMString sensorType,
                         in DOMString sensorId,
                         in unsigned short accuracy,
                         in unsigned short rate,
                         in boolean interrupt, 
                         in float[] sensorValues); 
    };

};