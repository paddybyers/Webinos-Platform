Abstract

Provides information to applications about the current authentication status of users, as well as allowing applications to request re-authentication.

Table of Contents

1. Introduction
2. Interfaces
2.1. AuthStatus
2.2. AuthError
2.3. AuthSuccessCB
2.4. AuthErrorCB
2.5. WebinosAuthenticationInterface
2.6. WebinosAuthentication
3. Exceptions
3.1. AuthenticationException
4. Features
5. Full WebIDL
Summary of Methods

Interface	Method
AuthStatus	
AuthError	
AuthSuccessCB	void onSuccess(AuthStatus status)
AuthErrorCB	void onError(AuthError error)
WebinosAuthenticationInterface	void authenticate(AuthSuccessCB successCB, AuthErrorCB errorCB)
boolean isAuthenticated()
AuthStatus getAuthenticationStatus()
WebinosAuthentication	
1. Introduction

Authentication API for providing applications with information about whether the current user has authenticated, and requesting re-authentication at runtime.

Requirement/architectural reference: PS-USR-Oxford-121

This API intentionally does not reveal identity information, but can give details about authentication method, which may reveal device information.

2. Interfaces

2.1. AuthStatus

The object returned when user authentication status is queried. This contains information about when and how authentication occurred.

  [NoInterfaceObject]
  interface AuthStatus  {
  
         attribute DOMString? lastAuthTime;

         attribute DOMString? authMethod;
         
         
         attribute DOMString? authMethodDetails;
  };
Attributes

DOMString? lastAuthTime
The time of last authentication, as a valid date or time string.

No exceptions.

Code example

 {lastAuthTime: '2011-03-24T09:00-08:00'} // last authentication was on March 24, 2011 @ 5pm (UTC)
 
DOMString? authMethod
An identifier for the type of authentication performed by the user. 
Intended to be flexible for different devices. Examples include "PIN", 
"Password", "Fingerprint". This is a high-level method name, no details.

DOMString? authMethodDetails
Further details as to the authentication method. This might include 
the authentication device identifier, or the numberof digits in PINS, or any device-specific value. Optional.

2.2. AuthError

Definition of error codes for authentication events

  [NoInterfaceObject]
  interface AuthError  {
        const unsigned short UNKNOWN_ERROR = 0;
        
        const unsigned short INVALID_ARGUMENT_ERROR = 1;
        
        const unsigned short PERMISSION_DENIED_ERROR = 20;

        const unsigned short TIMEOUT_ERROR = 2;

           
        readonly attribute unsigned short code;
        
  };
Constants

unsigned short UNKNOWN_ERROR
An unknown error occurred.

unsigned short INVALID_ARGUMENT_ERROR
An invalid parameter was provided when the requested method was invoked.

unsigned short PERMISSION_DENIED_ERROR
Access to the requested method was denied at the implementation or by the user.

unsigned short TIMEOUT_ERROR
Authentication timed out

Attributes

readonly unsigned short code
An error code assigned by an implementation when an error has occurred in authentication API processing.

This attribute is readonly.
2.3. AuthSuccessCB

Success callback for authentication events.

  [Callback=FunctionOnly, NoInterfaceObject]
  interface AuthSuccessCB {
        void onSuccess(AuthStatus status);
  };
2.4. AuthErrorCB

Error callback for authentication events.

  [Callback=FunctionOnly, NoInterfaceObject]
  interface AuthErrorCB {
        void onError(AuthError error);
  };
2.5. WebinosAuthenticationInterface

The authentication interface provides three methods which allow applications to check the current user authentication status and prompt for re-authentication.

  [NoInterfaceObject]
  interface WebinosAuthenticationInterface {


     void authenticate ( in AuthSuccessCB successCB, in optional AuthErrorCB errorCB );




     boolean isAuthenticated ( ) raises(AuthenticationException);


         


     AuthStatus getAuthenticationStatus () raises(AuthenticationException);



   };
Methods

authenticate
this method instructs the runtime to request that the user authenticate themselves. 
The method for authentication is not specified, it may be through any means provided by the platform.

Signature

void authenticate(in AuthSuccessCB successCB, in optional AuthErrorCB errorCB);
Errors can occur due to: a policy restricting access to this API, or an unknown error in the device-specific authentication method.

This is an asynchronous method, although it may well be used (in practice) synchronously.

Parameters

successCB
Optional: No.
Nullable: No
Type: AuthSuccessCB
Description: contains the status of the user with regards to authentication, including when 
and how he or she was last authenticated. It does not include user identity.
errorCB
Optional: Yes.
Nullable: No
Type: AuthErrorCB
Description: is a callback for when errors occur
Return value

isAuthenticated
Query the runtime to ask whether the user has recently been authenticated. How the platform 
determines this is not specified. It may return true if the user entered their PIN in the last 10 
minutes, for example. It is expected that a platform preference based on current authentication 
status would be defined. These preferences are security-sensitive.

Signature

boolean isAuthenticated();
Errors can occur due to: a policy restricting access to this API, or if the platform does not have 
a definitive answer due to a misconfigured preference or lack of information.

This is a synchronous method. Expected use would be to check at an important place whether the user is authenticated and, if not, call "authenticate" to do so.

Return value

True IFF the user has been authenticated to the satisfaction of the platform.
Exceptions

AuthenticationException:
getAuthenticationStatus
Query the runtime for precise details about the current state of the user with regard to 
authentication. 
Signature

AuthStatus getAuthenticationStatus();
Errors can occur due to: a policy restricting access to this API.

This is a synchronous method. Expected use is for when an application is determining whether the user ought to re-authenticate, or whether the user is suitably authenticated for a particular action. Future versions of this API may be able to insist that the user authenticates in a certain way.

Return value

AuthStatus - returns the status of the user with regards to authentication, including when 
and how he or she was last authenticated. It does not include user identity.
Exceptions

AuthenticationException:
2.6. WebinosAuthentication

The WebinosAuthentication interface describes the part of the Authentication API accessible through the webinos object.

        [NoInterfaceObject] interface WebinosAuthentication {
                readonly attribute WebinosAuthenticationInterface authentication;
        };
        webinoscore::Webinos implements WebinosAuthentication;
Attributes

readonly WebinosAuthenticationInterface authentication
webinos.authentication object.

This attribute is readonly.
3. Exceptions

3.1. AuthenticationException

Exception codes for authentication events

  exception AuthenticationException{ 
        unsigned short code;
        DOMString message;
        
        const unsigned short UNKNOWN_ERROR = 0;
        const unsigned short INVALID_ARGUMENT_ERROR = 1;
        const unsigned short PERMISSION_DENIED_ERROR = 20;
        const unsigned short TIMEOUT_ERROR = 2;
  };
4. Features

This is the list of URIs used to declare this API's features, for use in the widget config.xml and as identifier for service type in service discovery functionality. For each URI, the list of functions covered is provided.

http://webinos.org/api/authentication
5. Full WebIDL

module authentication {

  [NoInterfaceObject]
  interface AuthStatus  {
  
         attribute DOMString? lastAuthTime;

         attribute DOMString? authMethod;
         
         
         attribute DOMString? authMethodDetails;
  };
  
  [NoInterfaceObject]
  interface AuthError  {
        const unsigned short UNKNOWN_ERROR = 0;
        
        const unsigned short INVALID_ARGUMENT_ERROR = 1;
        
        const unsigned short PERMISSION_DENIED_ERROR = 20;

        const unsigned short TIMEOUT_ERROR = 2;

           
        readonly attribute unsigned short code;
        
  };
  
  [Callback=FunctionOnly, NoInterfaceObject]
  interface AuthSuccessCB {
        void onSuccess(AuthStatus status);
  };

  [Callback=FunctionOnly, NoInterfaceObject]
  interface AuthErrorCB {
        void onError(AuthError error);
  };
  
  exception AuthenticationException{ 
        unsigned short code;
        DOMString message;
        
        const unsigned short UNKNOWN_ERROR = 0;
        const unsigned short INVALID_ARGUMENT_ERROR = 1;
        const unsigned short PERMISSION_DENIED_ERROR = 20;
        const unsigned short TIMEOUT_ERROR = 2;
  };

  
   
  [NoInterfaceObject]
  interface WebinosAuthenticationInterface {


     void authenticate ( in AuthSuccessCB successCB, in optional AuthErrorCB errorCB );




     boolean isAuthenticated ( ) raises(AuthenticationException);


         


     AuthStatus getAuthenticationStatus () raises(AuthenticationException);



   };
   
        [NoInterfaceObject] interface WebinosAuthentication {
                readonly attribute WebinosAuthenticationInterface authentication;
        };

        webinoscore::Webinos implements WebinosAuthentication;
   

};