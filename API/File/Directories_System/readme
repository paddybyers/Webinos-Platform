Abstract

This document describes the functionality that Webinos devices should implement for accessing file system directories.

Table of Contents

1 - Introduction
2 - API
3 - Security
4 - WebIDL
References
1 - Introduction

This section is INFORMATIVE.

Webinos is fully committed to the use of Open Standards whenever available. The access to File System is done through the W3C File Directories and System API [FILEDIRSYS].

This module is accessed (as W3C specification mandates) through the global object (i.e. Window).

2 - API

This section is NORMATIVE.

Webinos implementations MUST support W3C File Directories and System API specification [FILEDIRSYS].

In order to use this API, access to it must be declared in the widget configuration document (i.e. config.xml). This declaration is done through the feature http://www.w3.org/ns/api-perms/file.system.

3 - Security

This section is NORMATIVE.

The implementation MUST NOT enable access to this API by default, but only if the declaration is present in the widget configuration document through the appropriate feature tag.

Please note that Webinos Security Framework, depending on its configuration and in the widget level of trust, MAY deny access to this API even if it is declared in the configuration document.

4 - WebIDL

This section is INFORMATIVE.

For completeness, this specification includes a copy of the WebIDL declaration included in the W3C File Directories and System API specification [FILEDIRSYS]. The referred specification includes all the details needed to create a conformant implementation.

Metadata Interface
[NoInterfaceObject]
interface Metadata {
    readonly attribute Date modificationTime;
};
Flags Interface
[NoInterfaceObject]
interface Flags {
    attribute boolean create;
    attribute boolean exclusive;
};
FileSystem Interface
[NoInterfaceObject]
interface FileSystem {
    readonly attribute DOMString      name;
    readonly attribute DirectoryEntry root;
};
Entry Interface
[NoInterfaceObject]
interface Entry {
    readonly attribute boolean    isFile;
    readonly attribute boolean    isDirectory;
    void      getMetadata (MetadataCallback successCallback, optional ErrorCallback errorCallback);
    readonly attribute DOMString  name;
    readonly attribute DOMString  fullPath;
    readonly attribute FileSystem filesystem;
    void      moveTo (DirectoryEntry parent, optional DOMString newName, optional EntryCallback successCallback, optional ErrorCallback errorCallback);
    void      copyTo (DirectoryEntry parent, optional DOMString newName, optional EntryCallback successCallback, optional ErrorCallback errorCallback);
    DOMString toURL (optional DOMString mimeType);
    void      remove (VoidCallback successCallback, optional ErrorCallback errorCallback);
    void      getParent (EntryCallback successCallback, optional ErrorCallback errorCallback);
};
DirectoryEntry Interface
[NoInterfaceObject]
interface DirectoryEntry : Entry {
    DirectoryReader createReader ();
    void            getFile (DOMString path, optional Flags options, optional EntryCallback successCallback, optional ErrorCallback errorCallback);
    void            getDirectory (DOMString path, optional Flags options, optional EntryCallback successCallback, optional ErrorCallback errorCallback);
    void            removeRecursively (VoidCallback successCallback, optional ErrorCallback errorCallback);
};
DirectoryReader Interface
[NoInterfaceObject]
interface DirectoryReader {
    void readEntries (EntriesCallback successCallback, optional ErrorCallback errorCallback);
};
FileEntry Interface
[NoInterfaceObject]
interface FileEntry : Entry {
    void createWriter (FileWriterCallback successCallback, optional ErrorCallback errorCallback);
    void file (FileCallback successCallback, optional ErrorCallback errorCallback);
};
FileSystemCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface FileSystemCallback {
    void handleEvent (FileSystem filesystem);
};
EntryCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface EntryCallback {
    void handleEvent (Entry entry);
};
EntriesCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface EntriesCallback {
    void handleEvent (Entry[] entries);
};
MetadataCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface MetadataCallback {
    void handleEvent (Metadata metadata);
};
FileWriterCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface FileWriterCallback {
    void handleEvent (FileWriter fileWriter);
};
FileCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface FileCallback {
    void handleEvent (File file);
};
VoidCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface VoidCallback {
    void handleEvent ();
};
ErrorCallback Interface
[NoInterfaceObject, Callback=FunctionOnly]
interface ErrorCallback {
    void handleEvent (FileError err);
};
FileSystemSync Interface
[NoInterfaceObject]
interface FileSystemSync {
    readonly attribute DOMString          name;
    readonly attribute DirectoryEntrySync root;
};
EntrySync Interface
[NoInterfaceObject]
interface EntrySync {
    readonly attribute boolean        isFile;
    readonly attribute boolean        isDirectory;
    Metadata           getMetadata () raises (FileException);
    readonly attribute DOMString      name;
    readonly attribute DOMString      fullPath;
    readonly attribute FileSystemSync filesystem;
    EntrySync          moveTo (DirectoryEntrySync parent, optional DOMString newName) raises (FileException);
    EntrySync          copyTo (DirectoryEntrySync parent, optional DOMString newName) raises (FileException);
    DOMString          toURL (optional DOMString mimeType);
    void               remove () raises (FileException);
    DirectoryEntrySync getParent ();
};
DirectoryEntrySync Interface
[NoInterfaceObject]
interface DirectoryEntrySync : EntrySync {
    DirectoryReaderSync createReader () raises (FileException);
    FileEntrySync       getFile (DOMString path, optional Flags options) raises (FileException);
    DirectoryEntrySync  getDirectory (DOMString path, optional Flags options) raises (FileException);
    void                removeRecursively () raises (FileException);
};
DirectoryReaderSync Interface
[NoInterfaceObject]
interface DirectoryReaderSync {
    EntrySync[] readEntries () raises (FileException);
};
FileEntrySync Interface
[NoInterfaceObject]
interface FileEntrySync : EntrySync {
    FileWriterSync createWriter () raises (FileException);
    File           file () raises (FileException);
};
FileError Interface
interface FileError {
    const unsigned short NOT_FOUND_ERR = 1;
    const unsigned short SECURITY_ERR = 2;
    const unsigned short ABORT_ERR = 3;
    const unsigned short NOT_READABLE_ERR = 4;
    const unsigned short ENCODING_ERR = 5;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 6;
    const unsigned short INVALID_STATE_ERR = 7;
    const unsigned short SYNTAX_ERR = 8;
    const unsigned short INVALID_MODIFICATION_ERR = 9;
    const unsigned short QUOTA_EXCEEDED_ERR = 10;
    const unsigned short TYPE_MISMATCH_ERR = 11;
    const unsigned short PATH_EXISTS_ERR = 12;
    attribute unsigned short code;
};
FileException Exception
exception FileException {
    const unsigned short NOT_FOUND_ERR = 1;
    const unsigned short SECURITY_ERR = 2;
    const unsigned short ABORT_ERR = 3;
    const unsigned short NOT_READABLE_ERR = 4;
    const unsigned short ENCODING_ERR = 5;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 6;
    const unsigned short INVALID_STATE_ERR = 7;
    const unsigned short SYNTAX_ERR = 8;
    const unsigned short INVALID_MODIFICATION_ERR = 9;
    const unsigned short QUOTA_EXCEEDED_ERR = 10;
    const unsigned short TYPE_MISMATCH_ERR = 11;
    const unsigned short PATH_EXISTS_ERR = 12;
    unsigned short code;
};