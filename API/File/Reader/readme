Abstract

This document describes the functionality that Webinos devices should implement for reading files.

Table of Contents

1 - Introduction
2 - API
3 - Security
4 - WebIDL
References
1 - Introduction

This section is INFORMATIVE.

Webinos is fully committed to the use of Open Standards whenever available. The access to File Reader is done through the W3C File Reader API [FILEREADER].

This module is accessed (as W3C specification mandates) through the blobal object (i.e. Window).

2 - API

This section is NORMATIVE.

Webinos implementations MUST support W3C File Reader specification [FILEREADER].

In order to use this API, access to it must be declared in the widget configuration document (i.e. config.xml). This declaration is done through the feature http://www.w3.org/ns/api-perms/file.read.

3 - Security

This section is NORMATIVE.

The implementation MUST NOT enable access to this API by default, but only if the declaration is present in the widget configuration document through the appropriate feature tag.

Please note that Webinos Security Framework, depending on its configuration and in the widget level of trust, MAY deny access to this API even if it is declared in the configuration document.

4 - WebIDL

This section is INFORMATIVE.

For completeness, this specification includes a copy of the WebIDL declaration included in the W3C File Reader specification [FILEREADER]. The referred specification includes all the details needed to create a conformant implementation.

Blob Interface
    interface Blob {
      
      readonly attribute unsigned long long size;
      readonly attribute DOMString type;
      //slice Blob into byte-ranged chunks
      
      Blob slice(in unsigned long long start,
                 in unsigned long long length,
                 optional DOMString contentType); 
    
    };
File Interface
  interface File : Blob {

      readonly attribute DOMString name;
      readonly attribute DOMString lastModifiedDate;
};
File Reader Interface
[Constructor]
interface FileReader {

  // async read methods
  void readAsArrayBuffer(in Blob blob);
  void readAsBinaryString(in Blob blob);
  void readAsText(in Blob blob, [Optional] in DOMString encoding);
  void readAsDataURL(in Blob blob);

  void abort();

  // states
  const unsigned short EMPTY = 0;
  const unsigned short LOADING = 1;
  const unsigned short DONE = 2;
  
  
  readonly attribute unsigned short readyState;

  // File or Blob data
  readonly attribute any result;
  
  readonly attribute FileError error;

  // event handler attributes
  attribute Function onloadstart;
  attribute Function onprogress;
  attribute Function onload;
  attribute Function onabort;
  attribute Function onerror;
  attribute Function onloadend;

};
FileReader implements EventTarget;
FileReaderSync Interface
[Constructor]
interface FileReaderSync {

  // Synchronously return strings
  // All three methods raise FileException
  
  ArrayBuffer readAsArrayBuffer(in Blob blob);
  DOMString readAsBinaryString(in Blob blob); 
  DOMString readAsText(in Blob blob, [Optional] in DOMString encoding);                                                       
  DOMString readAsDataURL(in Blob blob); 
};
FileError Interface
 interface FileError {
   // File error codes
   // Found in DOMException
   const unsigned short NOT_FOUND_ERR = 1;
   const unsigned short SECURITY_ERR = 2;
   const unsigned short ABORT_ERR = 3;
   
   // Added by this specification
   const unsigned short NOT_READABLE_ERR = 4;
   const unsigned short ENCODING_ERR = 5;
 
   readonly attribute unsigned short code;
 };
FileException Exception
 exception FileException {
  
  const unsigned short NOT_FOUND_ERR = 1;
  const unsigned short SECURITY_ERR = 2;
  const unsigned short ABORT_ERR = 3;
  
  const unsigned short NOT_READABLE_ERR = 4;
  const unsigned short ENCODING_ERR = 5;
 
  unsigned short code;
};
WindowBlobURIMethods Interface
[Supplemental, NoInterfaceObject]
interface WindowBlobURIMethods {

    DOMString createObjectURL(in Blob blob);
    void revokeObjectURL(in DOMString url);
};
Window implements WindowBlobURIMethods;

WorkerUtils implements WindowBlobURIMethods;