Abstract

The Event Handling API

Table of Contents

1. Introduction
2. Interfaces
2.1. WebinosEventEntity
2.2. WebinosEventAddressing
2.3. WebinosEvent
2.4. WebinosEventDeliveryError
2.5. WebinosEventCallbacks
2.6. WebinosEventListener
2.7. WebinosEventsInterface
2.8. WebinosEvents
3. Exceptions
3.1. WebinosEventException
4. Features
5. Full WebIDL
Summary of Methods

Interface	Method
WebinosEventEntity	
WebinosEventAddressing	
WebinosEvent	void dispatchWebinosEvent(WebinosEventCallbacks? callbacks, DOMTimeStamp? referenceTimeout, boolean sync)
void forwardWebinosEvent(WebinosEventAddressing forwarding, boolean withTimeStamp, WebinosEventCallbacks? callbacks, DOMTimeStamp? referenceTimeout, boolean sync)
WebinosEventDeliveryError	
WebinosEventCallbacks	void onSending(WebinosEvent event, WebinosEventEntity recipient)
void onCaching(WebinosEvent event)
void onDelivery(WebinosEvent event, WebinosEventEntity recipient)
void onTimeout(WebinosEvent event, WebinosEventEntity recipient)
void onError(WebinosEvent event, WebinosEventEntity recipient, WebinosEventDeliveryError error)
WebinosEventListener	void handleEvent(WebinosEvent event)
WebinosEventsInterface	WebinosEvent createWebinosEvent(DOMString type, WebinosEventAddressing addressing, DOMString? payload, WebinosEvent? inResponseTo, boolean withTimeStamp, DOMTimeStamp? expiryTimeStamp, boolean addressingSensitive)
DOMString addWebinosEventListener(WebinosEventListener listener, DOMString? type, WebinosEventEntity? source, WebinosEventEntity? destination)
void removeWebinosEventListener(DOMString listenerId)
WebinosEvents	
1. Introduction

The Webinos Event Handling API provides means to exchange data in terms of events among addressable entities (e.g., applications, services), either locally or remotely.

This is an advanced API that is mostly meant to be used by third-party developers to implement custom event-based protocols by taking advantage of the features offered by the Webinos event handling system, that in turn leverages off of the features offered by Webinos overlay networking model.

It is, therefore, strongly recommended to carefully read the Messaging section in the Webinos system specifications before committing to the usage of this API.

Despite its apparent complexity, this API revolves around three simple basic concepts: generating events, sending/forwarding events and registering/unregistering event listeners for incoming events.

The following example demonstrates what the core functionality of a simplicistic textual chat application could look like if implemented using this API.

Code example

// Array of objects implementing the WebinosEventEntity interface that
// represents the list of participants to the chat session, excluding the
// current application.
var participants = [...];

// DOM element that keeps a log of the whole session.
var logElem;

// DOM Text object that allows the user to insert text messages.
var inputElem;

// Function that somehow returns a human-readable name associated to the input
// entity.
function getName(entity) {
  ...
}

// Function that returns a copy of the input string with HTML control characters
// ('<', '>', '&') escaped ('&lt;', '&gt;', '&amp;').
function escapeHTML(str) {
  str = str.replace(/&/g, '&amp;');
  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

// Listener callback for incoming events.
function onMsg(evt) {
  // Appends event data to logElem.
  // E.g.: [00:00:00] Stefano said: Hi all!
  logElem.innerHTML += "[" + new Date(evt.timeStamp).toLocaleTimeString() + "] "
                       + getName(evt.addressing.source) + " said: "
                       + escapeHTML(evt.payload) + "\n";
}

// Delivery error notification callback.
function onMsgError(evt, recipient, error)
{
  // Pops up an alert dialog with error details.
  // E.g.: Stefano did not receive your message saying: "How are you?"
  //       Event refused (4)
  alert(getName(recipient) + ' did not receive your message saying: "'
        + evt.payload + '"\n' + error.message + '(' + error.code + ')');
}

// Listener to DOM "click" event for some "Send Message" button.
function onSendButtonClicked() {
  // Creates a new event of type "chatMessage" directed to all the chat
  // participants with payload containing the text in inputElem and with
  // timestamp.
  var evt = webinos.events.createWebinosEvent("chatMessage", {to: participants},
                                              inputElem.value, null, true, null,
                                              true);

  // Sends the event and specifies the onMsgError callback for handling error
  // delivery notifications.
  evt.dispatchWebinosEvent({onError: onMsgError});

  // Appends the input message to logElem.
  // E.g.: [00:01:00] you said: "Let's try again... how are you?"
  logElem.innerHTML += "[" + new Date(evt.timeStamp).toLocaleTimeString()
                       + "] you said: " + escapeHTML(evt.payload) + "\n";
}

// Initialization stuff.
document.onLoad = function() {
  // Gets "log" element.
  logElem = document.getElementById("log");

  // Gets "input" element.
  inputElem = document.getElementById("input");

  // Adds the onMsg() callback as an event listener for incoming events with
  // type "chatMessage", from any source and to any destination (within the
  // application).
  webinos.events.addWebinosEventListener(onMsg, "chatMessage");
}
 
2. Interfaces

2.1. WebinosEventEntity

The WebinosEventEntity interface describes an addressable entity of any kind.

        [NoInterfaceObject] interface WebinosEventEntity {
                attribute DOMString id;
        };
Attributes

DOMString id
Globally unique identifier.

2.2. WebinosEventAddressing

The WebinosEventAddressing interface contains references to the sender and recipients of an event.

        [NoInterfaceObject] interface WebinosEventAddressing {
                attribute WebinosEventEntity source;
                attribute WebinosEventEntity[] to;
                attribute WebinosEventEntity[] cc;
                attribute WebinosEventEntity[] bcc;
        };
This interfaces comes in two flavors: a strict normalized form for events generated and/or processed by the Webinos runtime, and a more lax non-normalized form to ease API usage.

Please, keep in mind that the Webinos runtime always operates on normalized equivalents of user-supplied objects implementing this interface in non-normalized form, hence it creates those equivalents by applying the normalization process described in the documentation of the createWebinosEvent() function of the WebinosEventsInterface interface.

Details on both forms are given in each attribute's description.

Attributes

WebinosEventEntity source
Event source.

In the normalized form it SHALL always be set.

The non-normalized form allows to use null or undefined to indicate the current application.

WebinosEventEntity [] to
Array of primary recipients.

It MUST always contain at least one element.

In the normalized form it SHALL be sorted in ascending order by Unicode code points and SHALL NOT contain duplicate entries.

WebinosEventEntity [] cc
Array of secondary recipients.

It MAY be empty.

In the normalized form it SHALL be sorted in ascending order by Unicode code points, SHALL NOT contain duplicate entries and SHALL NOT contain entries that are also found in the "to" array.

The non-normalized form allows to use null or undefined to indicate no secondary recipients.

WebinosEventEntity [] bcc
Array of blind-carbon-copy recipients.

It MAY be empty.

In the normalized form it SHALL be sorted in ascending order by Unicode code points, SHALL NOT contain duplicate entries and SHALL NOT contain entries that are also found in the "to" or "cc" arrays.

The non-normalized form allows to use null or undefined to indicate no blind-carbon-copy recipients.

2.3. WebinosEvent

The WebinosEvent interface describes an incoming or outgoing event.

        [NoInterfaceObject] interface WebinosEvent {
                readonly attribute DOMString type;
                readonly attribute WebinosEventAddressing addressing;
                readonly attribute DOMString id;
                readonly attribute WebinosEvent inResponseTo;
                readonly attribute DOMTimeStamp? timeStamp;
                readonly attribute DOMTimeStamp? expiryTimeStamp;
                readonly attribute boolean addressingSensitive;
                readonly attribute WebinosEventAddressing forwarding;
                readonly attribute DOMTimeStamp? forwardingTimeStamp;
                readonly attribute DOMString? payload;

                void dispatchWebinosEvent(
                                in optional WebinosEventCallbacks? callbacks,
                                in optional DOMTimeStamp? referenceTimeout,
                                in optional boolean sync)
                     raises(WebinosEventException);
                void forwardWebinosEvent(
                                in WebinosEventAddressing forwarding,
                                in optional boolean withTimeStamp,
                                in optional WebinosEventCallbacks? callbacks,
                                in optional DOMTimeStamp? referenceTimeout,
                                in optional boolean sync)
                     raises(WebinosEventException);
        };
Attributes

readonly DOMString type
Event type identifier.

It MUST match the following regular expression: [_a-zA-Z][_a-zA-Z0-9]*

Identifiers "deliveryNotification", "JSONRPC20Request" and "JSONRPC20Response" are reserved, hence not allowed.

This attribute is readonly.
readonly WebinosEventAddressing addressing
References to the original sender and recipients in normalized form.

This attribute is readonly.
readonly DOMString id
Event identifier.

It is calculated by hashing a partial serialization of the WebinosEvent object that involves: 
- the event type; 
- the original event source and primary recipients, in case the "addressingSensitive" attribute is true; 
- the identifier of the event that this event is a response to, if any; 
- the event timestamp, if present; 
- the event expiry timestamp, if present; 
- the payload, if present.

Even though not strictly required, conforming implementations are recommended to implement some strategy to try to limit the likelihood that an application instance is delivered more than one event with a given id. Users of this API MUST assume that no more than one event with a given id is ever delivered to a given recipient.

For more details, please refer to the Webinos system specifications.

This attribute is readonly.
readonly WebinosEvent inResponseTo
Event that this event is a response to.

If null, this event was not sent in response to another event.

This attribute is readonly.
readonly DOMTimeStamp? timeStamp
Moment in time in which the event is generated by the original event source.

It MAY be null.

This attribute is readonly.
readonly DOMTimeStamp? expiryTimeStamp
Moment in time past which the event is no more valid or meaningful.

It MAY be null.

This attribute is readonly.
readonly boolean addressingSensitive
Indicates whether the original addressing information is part of the informative content of the event.

In practice, when this is set to true, the identifiers of the orignal event source and primary recipients are used to compute the event id.

This attribute is readonly.
readonly WebinosEventAddressing forwarding
References to the entity that forwarded the event and the recipients of such forwarding.

It is null if the event was not subject to any forwarding, hence it comes straight from the original sending entity.

This attribute is readonly.
readonly DOMTimeStamp? forwardingTimeStamp
Moment in time in which the event was forwarded by the forwarding source.

It SHALL be null if "forwarding" is null and MAY be null also if "forwarding" is not null.

This attribute is readonly.
readonly DOMString? payload
Event type-specific data.

It MAY be null.

This attribute is readonly.
Methods

dispatchWebinosEvent
Sends an event.

Signature

void dispatchWebinosEvent(in optional WebinosEventCallbacks? callbacks, in optional DOMTimeStamp? referenceTimeout, in optional boolean sync);
W.r.t. the "Delivery notification wanted" attribute described in the Webinos system specification, its value in the implementation is to be deferred from the callbacks parameter and allowed to change between dispatchWebinosEvent() and forwardWebinosEvent() calls. It SHALL be true when delivery and/or error callbacks are passed via the callbacks argument, false otherwise.

NOTE: Please, keep in mind that all recipients SHALL get references to all entities specified in the "to" and "cc" attributes.

Parameters

callbacks
Optional: Yes.
Nullable: Yes
Type: WebinosEventCallbacks
Description: Set of callbacks to monitor sending status (null and undefined are considered as equivalent to a WebinosEventCallbacks object with all attributes set to null).
referenceTimeout
Optional: Yes.
Nullable: Yes
Type: DOMTimeStamp
Description: Moment in time until which the Webinos runtime SHALL ensure that the WebinosEvent object being sent is not garbage collected for the purpose of receiving events in response to the event being sent (null, undefined and values up to the current date/time mean that no special action is taken by the runtime in this regard).
sync
Optional: Yes.
Nullable: No
Type: boolean
Description: If false or undefined, the function is non-blocking, otherwise if true it will block until one of the following conditions becomes true: 
- if referenceTimeout represents a moment in time in the future at call time, that moment is reached; 
- otherwise, if the "expiryTimeStamp" attribute is specified as a moment in time in the future at call time, that moment is reached; 
- in any case, the end result of the operation is completely determined for all recipients and all callbacks that were to be called have run.
Exceptions

WebinosEventException:
INVALID_ARGUMENT_ERROR if any of the supplied arguments is not valid. 
PERMISSION_DENIED_ERROR if some local policy rule does not allow for the event to be sent.

forwardWebinosEvent
Forwards an event.

Signature

void forwardWebinosEvent(in WebinosEventAddressing forwarding, in optional boolean withTimeStamp, in optional WebinosEventCallbacks? callbacks, in optional DOMTimeStamp? referenceTimeout, in optional boolean sync);
W.r.t. the "Delivery notification wanted" attribute described in the Webinos system specification, its value in the implementation is to be deferred from the callbacks parameter and allowed to change between dispatchWebinosEvent() and forwardWebinosEvent() calls. It SHALL be true when delivery and/or error callbacks are passed via the callbacks argument, false otherwise.

Conforming implementations SHALL NOT modify the "Forwarding" attribute of the local WebinosEvent object when this function is called.

NOTE: Please, keep in mind that all recipients referenced by the forwarding argument SHALL get references to all entities specified in the "to", "cc" and "bcc" arrays of the "addressing" attribute, as well as references to all entities specified in the "to" and "cc" arrays of the forwarding argument.

Parameters

forwarding
Optional: No.
Nullable: No
Type: WebinosEventAddressing
Description: References to the entity on the behalf of which the application wants to forward the event and to the recipients of such forwarding. This argument SHALL be processed in the same way as the webinos.events.createWebinosEvent() function processes its "addressing" argument (i.e., make a normalized copy).
withTimeStamp
Optional: Yes.
Nullable: No
Type: boolean
Description: Whether to set the forwarding timestamp (undefined is considered as equivalent to false).
callbacks
Optional: Yes.
Nullable: Yes
Type: WebinosEventCallbacks
Description: Set of callbacks to monitor forwarding status (null and undefined are considered as equivalent to an WebinosEventCallbacks object with all attributes set to null).
referenceTimeout
Optional: Yes.
Nullable: Yes
Type: DOMTimeStamp
Description: Moment in time until which the Webinos runtime SHALL ensure that the WebinosEvent object being forwarded is not garbage collected for the purpose of receiving events in response to the event being forwarded (null, undefined and values up to the current date/time mean that no special action is taken by the runtime in this regard).
sync
Optional: Yes.
Nullable: No
Type: boolean
Description: If false or undefined, the function is non-blocking, otherwise if true it will block until one of the following conditions becomes true: 
- if referenceTimeout represents a moment in time in the future at call time, that moment is reached; 
- otherwise, if the "expiryTimeStamp" attribute is specified as a moment in time in the future at call time, that moment is reached; 
- in any case, the end result of the operation is completely determined for all recipients and all callbacks that were to be called have run.
Exceptions

WebinosEventException:
INVALID_ARGUMENT_ERROR if any of the supplied arguments is not valid. 
PERMISSION_DENIED_ERROR if some local policy rule does not allow for the event to be forwarded.

2.4. WebinosEventDeliveryError

The WebinosEventDeliveryError interface describes event delivery errors reported using the delivery notification protocol.

        [NoInterfaceObject] interface WebinosEventDeliveryError {
                readonly attribute unsigned short code;
                readonly attribute DOMString message;

                const unsigned short UNKNOWN_ERR                = 0;
                const unsigned short INVALID                    = 1;
                const unsigned short BAD_DESTINATION            = 2;
                const unsigned short EXPIRED                    = 3;
                const unsigned short REFUSED                    = 4;
                const unsigned short NO_REFERENCE               = 5;
        };
Constants

unsigned short UNKNOWN_ERR
Unknown error.

unsigned short INVALID
The recipient got an invalid event (e.g., transmission error).

unsigned short BAD_DESTINATION
The intended recipient is unknown or unreachable.

unsigned short EXPIRED
The event expired before the actual delivery, according to its "expiryTimestamp" attribute.

unsigned short REFUSED
The event could not be received because of lack of authorization and/or policy settings.

unsigned short NO_REFERENCE
The recipient does not hold a local reference to the event specified by the "inResponseTo" attribute.

Attributes

readonly unsigned short code
Error code.

This attribute is readonly.
readonly DOMString message
Error description.

This attribute is readonly.
2.5. WebinosEventCallbacks

The WebinosEventCallbacks interface allows to pass a set of status monitoring callbacks to event sending/forwarding methods.

        [Callback, NoInterfaceObject] interface WebinosEventCallbacks {
                void onSending(in WebinosEvent event,
                               in WebinosEventEntity recipient);
                void onCaching(in WebinosEvent event);
                void onDelivery(in WebinosEvent event,
                                in WebinosEventEntity recipient);
                void onTimeout(in WebinosEvent event,
                               in WebinosEventEntity recipient);
                void onError(in WebinosEvent event,
                             in WebinosEventEntity recipient,
                             in WebinosEventDeliveryError error);
        };
TODO: does this definition allow to use null/undefined? Otherwise should define callback types and use nullable attributes.

Methods

onSending
Called right after the event has been successfully transmitted to the "next hop".

Signature

void onSending(in WebinosEvent event, in WebinosEventEntity recipient);
This callback SHALL NOT be called more than once per recipient for each send/forward.

Parameters

event
Optional: No.
Nullable: No
Type: WebinosEvent
Description: The event being transmitted.
recipient
Optional: No.
Nullable: No
Type: WebinosEventEntity
Description: The recipient to which the event is being transmitted.
onCaching
Called right after the event has been put into the Local Event Cache for later transmission (e.g., when trying to send it to a remote entity but no connectivity is currently available).

Signature

void onCaching(in WebinosEvent event);
Parameters

event
Optional: No.
Nullable: No
Type: WebinosEvent
Description: The event being cached.
onDelivery
Called as soon as successful event delivery has been reported by a given recipient or if the recipient notifies that it did already receive an event with the same ID.

Signature

void onDelivery(in WebinosEvent event, in WebinosEventEntity recipient);
This callback SHALL NOT be called more than once per recipient for each send/forward.

Conforming implementations SHALL set the "Delivery notification wanted" attribute described in the Webinos system specifications as true whenever this callback is specified.

Parameters

event
Optional: No.
Nullable: No
Type: WebinosEvent
Description: The event that was successfully delivered.
recipient
Optional: No.
Nullable: No
Type: WebinosEventEntity
Description: The recipient that notified delivery success.
onTimeout
Called right after the moment in time specified by the "referenceTimeout" attribute is reached and the given primary recipient did not successfully sent back at least one event in response to the given event.

Signature

void onTimeout(in WebinosEvent event, in WebinosEventEntity recipient);
This callback SHALL only be called if the "referenceTimeout" attribute indicates a moment in time in the future at sending/forwarding time and SHALL NOT be called more than once per recipient for each send/forward.

Parameters

event
Optional: No.
Nullable: No
Type: WebinosEvent
Description: The event.
recipient
Optional: No.
Nullable: No
Type: WebinosEventEntity
Description: The recipient that did not successfully sent back at least one event in response to the given event.
onError
Called as soon as unsuccessful event delivery has been reported w.r.t. a given recipient.

Signature

void onError(in WebinosEvent event, in WebinosEventEntity recipient, in WebinosEventDeliveryError error);
This callback SHALL be called when the recipient reports unsuccessful delivery or when it was not possible to send the message and the event expired.

This callback SHALL NOT be called more than once per recipient for each send/forward.

Conforming implementations SHALL set the "Delivery notification wanted" attribute described in the Webinos system specifications as true whenever this callback is specified.

Parameters

event
Optional: No.
Nullable: No
Type: WebinosEvent
Description: The event that was not successfully delivered.
recipient
Optional: No.
Nullable: No
Type: WebinosEventEntity
Description: The recipient that notified delivery error.
error
Optional: No.
Nullable: No
Type: WebinosEventDeliveryError
Description: The reported error.
2.6. WebinosEventListener

The WebinosEventListener interface describes an event listener callback.

        [Callback=FunctionOnly] interface WebinosEventListener {
                void handleEvent(in WebinosEvent event);
        };
Methods

handleEvent
Called when a new event is received.

Signature

void handleEvent(in WebinosEvent event);
Parameters

event
Optional: No.
Nullable: No
Type: WebinosEvent
Description: The event.
2.7. WebinosEventsInterface

The WebinosEventsInterface interface describes the part of the Event Handling API accessible through the webinos.events object.

        [NoInterfaceObject] interface WebinosEventsInterface {
                WebinosEvent createWebinosEvent(
                                in DOMString type,
                                in WebinosEventAddressing addressing,
                                [TreatUndefinedAs=Null]
                                  in optional DOMString? payload,
                                in optional WebinosEvent? inResponseTo,
                                in optional boolean withTimeStamp,
                                in optional DOMTimeStamp? expiryTimeStamp,
                                in optional boolean addressingSensitive)
                             raises(WebinosEventException);
                DOMString addWebinosEventListener(
                                in WebinosEventListener listener,
                                [TreatUndefinedAs=Null]
                                  in optional DOMString? type,
                                in optional WebinosEventEntity? source,
                                in optional WebinosEventEntity? destination)
                          raises(WebinosEventException);
                void removeWebinosEventListener(in DOMString listenerId)
                     raises(WebinosEventException);
        };
Methods

createWebinosEvent
Creates a new event.

Signature

WebinosEvent createWebinosEvent(in DOMString type, in WebinosEventAddressing addressing, in optional DOMString? payload, in optional WebinosEvent? inResponseTo, in optional boolean withTimeStamp, in optional DOMTimeStamp? expiryTimeStamp, in optional boolean addressingSensitive);
The function SHALL accept the "addressing" argument both in normalized and non-normalized form and, in either case, the resulting "addressing" attribute in the newly created WebinosEvent object SHALL reference a newly created and normalized equivalent of such argument where: 
- entries that are found both in "to" and "cc" in the original argument are removed from the "cc" array of the resulting WebinosEventAddressing object; 
- entries that are found both in "to" and "bcc" in the original argument are removed from the "bcc" array of the resulting WebinosEventAddressing object; 
- entries that are found both in "cc" and "bcc" in the original argument are removed from the "bcc" array of the resulting WebinosEventAddressing object.

Furthermore, the function SHALL also make sure that it is valid for the application to create the event on the behalf of the specified source, otherwise an WebinosEventException exception with error code INVALID_ARGUMENT_ERROR SHALL be thrown.

Parameters

type
Optional: No.
Nullable: No
Type: DOMString
Description: Event type identifier.
addressing
Optional: No.
Nullable: No
Type: WebinosEventAddressing
Description: References to the sending entity on the behalf of which the application wants to create the event and to the event recipients.
payload
Optional: Yes.
Nullable: Yes
Type: DOMString
Description: Event type-specific data or null (undefined is considered as equivalent to null).
inResponseTo
Optional: Yes.
Nullable: Yes
Type: WebinosEvent
Description: Event that this event is a response to (undefined is considered as equivalent to null).
withTimeStamp
Optional: Yes.
Nullable: No
Type: boolean
Description: Whether to set the generation timestamp (undefined is considered as equivalent to false).
expiryTimeStamp
Optional: Yes.
Nullable: Yes
Type: DOMTimeStamp
Description: Moment in time past which the event is no more valid or meaningful (undefined is considered as equivalent to null).
addressingSensitive
Optional: Yes.
Nullable: No
Type: boolean
Description: Whether the addressing information is part of the informative content of the event (undefined is considered as equivalent to false).
Return value

Newly created WebinosEvent object or null if an error occurred.
Exceptions

WebinosEventException:
INVALID_ARGUMENT_ERROR if any of the supplied arguments is not valid.

addWebinosEventListener
Registers an event listener.

Signature

DOMString addWebinosEventListener(in WebinosEventListener listener, in optional DOMString? type, in optional WebinosEventEntity? source, in optional WebinosEventEntity? destination);
The arguments to this function act as filters, in the sense that when a new event is received, the listener is called if the event's attributes match with all arguments passed to this function.

When a new event is received, all listeners that were registered via this function with matching arguments SHALL be called, yet the order of such calls is unspecified.

Registering a listener SHALL NOT have consequences on other listeners, hence it SHALL be possible to register multiple listeners to the same event type/source/destination combinations.

Parameters

listener
Optional: No.
Nullable: No
Type: WebinosEventListener
Description: The event listener.
type
Optional: Yes.
Nullable: Yes
Type: DOMString
Description: Specific event type or null for any type (undefined is considered as null).
source
Optional: Yes.
Nullable: Yes
Type: WebinosEventEntity
Description: Specific event source or null for any source (undefined is considered as null).
destination
Optional: Yes.
Nullable: Yes
Type: WebinosEventEntity
Description: Specific event recipient (whether primary or not) or null for any destination (undefined is considered as null).
Return value

Listener identifier.
Exceptions

WebinosEventException:
INVALID_ARGUMENT_ERROR if any of the supplied arguments is not valid.

removeWebinosEventListener
Unregisters an event listener.

Signature

void removeWebinosEventListener(in DOMString listenerId);
Unregistering a listener SHALL NOT have consequences on other listeners.

Parameters

listenerId
Optional: No.
Nullable: No
Type: DOMString
Description: Listener identifier as returned by addWebinosEventListener().
Exceptions

WebinosEventException:
INVALID_ARGUMENT_ERROR if any of the supplied arguments is not valid.

2.8. WebinosEvents

The WebinosEvents interface describes the part of the Event Handling API accessible through the webinos object.

        [NoInterfaceObject] interface WebinosEvents {
                readonly attribute WebinosEventsInterface events;
        };
        webinoscore::Webinos implements WebinosEvents;
Attributes

readonly WebinosEventsInterface events
webinos.events object.

This attribute is readonly.
3. Exceptions

3.1. WebinosEventException

Error codes for the events module.

        exception WebinosEventException {
                unsigned short code;
                DOMString message;

                const unsigned short INVALID_ARGUMENT_ERROR     = 1;
                const unsigned short PERMISSION_DENIED_ERROR    = 2;
        };
Field

unsigned short code
Error code.

DOMString message
Error description.

4. Features

This is the list of URIs used to declare this API's features, for use in the widget config.xml and as identifier for service type in service discovery functionality. For each URI, the list of functions covered is provided.

http://webinos.org/api/events
5. Full WebIDL

module events {
        [NoInterfaceObject] interface WebinosEventEntity {
                attribute DOMString id;
        };

        [NoInterfaceObject] interface WebinosEventAddressing {
                attribute WebinosEventEntity source;
                attribute WebinosEventEntity[] to;
                attribute WebinosEventEntity[] cc;
                attribute WebinosEventEntity[] bcc;
        };

        [NoInterfaceObject] interface WebinosEvent {
                readonly attribute DOMString type;
                readonly attribute WebinosEventAddressing addressing;
                readonly attribute DOMString id;
                readonly attribute WebinosEvent inResponseTo;
                readonly attribute DOMTimeStamp? timeStamp;
                readonly attribute DOMTimeStamp? expiryTimeStamp;
                readonly attribute boolean addressingSensitive;
                readonly attribute WebinosEventAddressing forwarding;
                readonly attribute DOMTimeStamp? forwardingTimeStamp;
                readonly attribute DOMString? payload;

                void dispatchWebinosEvent(
                                in optional WebinosEventCallbacks? callbacks,
                                in optional DOMTimeStamp? referenceTimeout,
                                in optional boolean sync)
                     raises(WebinosEventException);
                void forwardWebinosEvent(
                                in WebinosEventAddressing forwarding,
                                in optional boolean withTimeStamp,
                                in optional WebinosEventCallbacks? callbacks,
                                in optional DOMTimeStamp? referenceTimeout,
                                in optional boolean sync)
                     raises(WebinosEventException);
        };

        exception WebinosEventException {
                unsigned short code;
                DOMString message;

                const unsigned short INVALID_ARGUMENT_ERROR     = 1;
                const unsigned short PERMISSION_DENIED_ERROR    = 2;
        };

        [NoInterfaceObject] interface WebinosEventDeliveryError {
                readonly attribute unsigned short code;
                readonly attribute DOMString message;

                const unsigned short UNKNOWN_ERR                = 0;
                const unsigned short INVALID                    = 1;
                const unsigned short BAD_DESTINATION            = 2;
                const unsigned short EXPIRED                    = 3;
                const unsigned short REFUSED                    = 4;
                const unsigned short NO_REFERENCE               = 5;
        };

        [Callback, NoInterfaceObject] interface WebinosEventCallbacks {
                void onSending(in WebinosEvent event,
                               in WebinosEventEntity recipient);
                void onCaching(in WebinosEvent event);
                void onDelivery(in WebinosEvent event,
                                in WebinosEventEntity recipient);
                void onTimeout(in WebinosEvent event,
                               in WebinosEventEntity recipient);
                void onError(in WebinosEvent event,
                             in WebinosEventEntity recipient,
                             in WebinosEventDeliveryError error);
        };

        [Callback=FunctionOnly] interface WebinosEventListener {
                void handleEvent(in WebinosEvent event);
        };

        [NoInterfaceObject] interface WebinosEventsInterface {
                WebinosEvent createWebinosEvent(
                                in DOMString type,
                                in WebinosEventAddressing addressing,
                                [TreatUndefinedAs=Null]
                                  in optional DOMString? payload,
                                in optional WebinosEvent? inResponseTo,
                                in optional boolean withTimeStamp,
                                in optional DOMTimeStamp? expiryTimeStamp,
                                in optional boolean addressingSensitive)
                             raises(WebinosEventException);
                DOMString addWebinosEventListener(
                                in WebinosEventListener listener,
                                [TreatUndefinedAs=Null]
                                  in optional DOMString? type,
                                in optional WebinosEventEntity? source,
                                in optional WebinosEventEntity? destination)
                          raises(WebinosEventException);
                void removeWebinosEventListener(in DOMString listenerId)
                     raises(WebinosEventException);
        };

        [NoInterfaceObject] interface WebinosEvents {
                readonly attribute WebinosEventsInterface events;
        };

        webinoscore::Webinos implements WebinosEvents;
};