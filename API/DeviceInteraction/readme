Abstract

This document describes the functionality that Webinos devices should implement for interacting with the end user through the device.

Table of Contents

1 - Introduction
2 - API
3 - Security
4 - WebIDL
References
1 - Introduction

This section is INFORMATIVE.

Webinos is fully committed to the use of Open Standards whenever available. The interaction with the end-user is done through the WAC Device Interaction API [DEVICEINTERACTION].

2 - API

This section is NORMATIVE.

Webinos implementations MUST support WAC Device Interaction specification [DEVICEINTERACTION].

In order to use this API, access to it must be declared in the widget configuration document (i.e. config.xml). This declaration is done through the feature http://wacapps.net/api/deviceinteraction.

3 - Security

This section is NORMATIVE.

The implementation MUST NOT enable access to this API by default, but only if the declaration is present in the widget configuration document through the appropriate feature tag.

Please note that Webinos Security Framework, depending on its configuration and in the widget level of trust, MAY deny access to this API even if it is declared in the configuration document.

4 - WebIDL

This section is INFORMATIVE.

For completeness, this specification includes a copy of the WebIDL declaration included in the WAC Device Interaction specification [DEVICEINTERACTION]. The referred specification includes all the details needed to create a conformant implementation.

DeviceapisDeviceInteractionManager Interface
interface DeviceapisDeviceInteractionManager {
    readonly attribute DeviceInteractionManager deviceinteraction;
  };
  Deviceapis implements DeviceapisDeviceInteractionManager;
DeviceInteractionManager Interface
  interface DeviceInteractionManager {

    PendingOperation startNotify(in SuccessCallback successCallback,in ErrorCallback errorCallback,in long duration)
                     raises (DeviceAPIError);

    void stopNotify();

    PendingOperation startVibrate(in SuccessCallback successCallback,
                                  in ErrorCallback errorCallback,
                                  in long? duration, 
                      [TreatUndefinedAs=Null]in optional DOMString? pattern)
                      raises (DeviceAPIError);

    void stopVibrate();

    PendingOperation lightOn(in SuccessCallback successCallback, 
                             in ErrorCallback errorCallback,
                             in long duration)
                 raises (DeviceAPIError);

    void lightOff();
    
    PendingOperation setWallpaper(in SuccessCallback successCallback, 
                                  in ErrorCallback errorCallback, 
                                  in DOMString fileName)
                                  raises (DeviceAPIError);
  };

DeviceAPIError Interface
  [NoInterfaceObject] interface DeviceAPIError {
    readonly attribute unsigned short code;

    readonly attribute DOMString message;

    const unsigned short      UNKNOWN_ERR                    = 0;

    const unsigned short      INDEX_SIZE_ERR                 = 1;
    const unsigned short      DOMSTRING_SIZE_ERR             = 2;
    const unsigned short      HIERARCHY_REQUEST_ERR          = 3;
    const unsigned short      WRONG_DOCUMENT_ERR             = 4;
    const unsigned short      INVALID_CHARACTER_ERR          = 5;
    const unsigned short      NO_DATA_ALLOWED_ERR            = 6;
    const unsigned short      NO_MODIFICATION_ALLOWED_ERR    = 7;
    const unsigned short      NOT_FOUND_ERR                  = 8;

    const unsigned short      NOT_SUPPORTED_ERR              = 9;
    const unsigned short      INUSE_ATTRIBUTE_ERR            = 10;
    const unsigned short      INVALID_STATE_ERR              = 11;
    const unsigned short      SYNTAX_ERR                     = 12;
    const unsigned short      INVALID_MODIFICATION_ERR       = 13;
    const unsigned short      NAMESPACE_ERR                  = 14;
    const unsigned short      INVALID_ACCESS_ERR             = 15;
    const unsigned short      VALIDATION_ERR                 = 16;

    const unsigned short      TYPE_MISMATCH_ERR              = 17;
  
    const unsigned short      SECURITY_ERR                   = 18;

    const unsigned short      NETWORK_ERR                    = 19;
  
    const unsigned short      ABORT_ERR                      = 20;

    const unsigned short      TIMEOUT_ERR                    = 21;

    const unsigned short      INVALID_VALUES_ERR             = 22;
  };
SucessCallback Interface
[Callback=FunctionOnly, NoInterfaceObject] interface SuccessCallback {
    void onsuccess();
  };
ErrorCallback Interface
[Callback=FunctionOnly, NoInterfaceObject] interface ErrorCallback {
   void onerror(in DeviceAPIError error);
};
PendingOperation Interface
[NoInterfaceObject] interface PendingOperation {
   boolean cancel();
 };